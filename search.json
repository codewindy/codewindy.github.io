[{"title":"Redmi K40刷欧版miui","url":"/2021/04/18/Redmi-K40-miui-eu/","content":"\n## k40刷机教程\n\n# 一. 背景\n* 新买了2个k40手机，一个寄回老家，一个自用顺便把三年前的iphone 8plus替换下来\n  <!--more-->\n* 因为大陆版本广告太多了重置后浪费好多时间去设置关闭广告以及浏览器默认广告没法去除等等因素就决定刷机\n* 安卓手机比iPhone优势在信号强，电池待机久，但是屏幕和通知权限等做的不好\n# 二. 步骤\n* 准备环境先解锁unlock需要等待7天并下载好rom\n* 然后连接到电脑fastboot模式下刷机等待即可\n* 刷完机后需要安装magisk获取root以及本地化\n* 实际刷了三次，前两次因为好多年没碰过安卓导致刷错了rom弄成转头了不过还在下载大陆rom刷回来了就是折腾浪费时间精力\n* 按照以下参考链接教程[Redmi K40/POCO F3刷MIUI EU(欧洲版) 12.6+Root+大陆本土化套件选装](https://www.yongchangguo.com/archives/RedMiFlushToEUAndRoot.html)\n* 但是我这边装完magisk后本地化`mi pay`和`应用商店`不兼容导致一直卡顿重启\n* 效果图如下\n* ![2521618712227_.pic.jpg](https://i.loli.net/2021/04/18/KE8Qcvi4ISfZRYp.jpg)\n* ![2531618712238_.pic.jpg](https://i.loli.net/2021/04/18/lBe6LZvEYfagOSc.jpg)\n\n# 三. 参考\n* [apkpure](https://m.apkpure.com/) 下载纯净apk\n* [Redmi K40/POCO F3刷MIUI EU(欧洲版) 12.6+Root+大陆本土化套件选装](https://www.yongchangguo.com/archives/RedMiFlushToEUAndRoot.html)\n* [解锁工具](https://www.miui.com/unlock/index.html) 注意解锁需要绑定mi账号并且要等7 天\n* [下载k40 rom](https://xiaomi.eu/community/threads/21-4-7-8.60699/)\n* [安装magisk后修改boot.img得到magisk_patched-22100_DZXGd.img后](https://github.com/topjohnwu/Magisk/releases) \n\n  执行`platform-tools-windows\\fastboot.exe flash boot ..\\images\\root\\magisk_patched-22100_DZXGd.img`\n* [大陆本土化套件熟悉](https://blog.minamigo.moe/archives/184)\n* [大陆本土化套件安装，通过magisk的模块进行本地化根据提示安装下载导入到手机的0.72.zip](https://minamigo-my.sharepoint.com/:f:/g/personal/koizumishouta_minamigo_onmicrosoft_com/EgLhpcA_G_5IugTq10F90r0BzUbaO7aHamxpZCUUgBgefg?e=VVvXXd)","tags":["life"]},{"title":"BaiduYunPan Downloader","url":"/2021/01/01/BaiduYunPanDownloader/","content":"\n## 百度云盘和 b站下载\n\n# 一. 背景\n* 百度云下载很麻烦找了加速工具提高下载体验\n  <!--more-->\n* 在里面随便找一个能用的试试 `https://runine.cn/DuPan/`\n* 下载b站的视频教程工具`https://github.com/nICEnnnnnnnLee/BilibiliDown/releases`\n# 二. 参考\n* [https://runine.cn/DuPan/](https://runine.cn/DuPan/)\n* [BilibiliDown](https://github.com/nICEnnnnnnnLee/BilibiliDown/releases)\n\n\n","tags":["life"]},{"title":"Charles-Tips","url":"/2021/01/01/Charles-Tips/","content":"\n## 配置Charles 抓包手机和电脑流量\n\n# 一. 背景\n* 学习http和https的区别\n  <!--more-->\n* 钉钉app 找不到web端入口，且已购买的教程视频课程被禁止下载，通过抓包找到下载接口实现资源保存\n# 二. 步骤\n* 下载charles 4.6.1\n* 点击`help =>SSL Proxying => Install Charles Root Certificate安装根证书 `\n* 注意点击trust并选择始终信任\n![image.png](https://i.loli.net/2021/01/20/CB6srH8SYb5upcF.png)\n* 然后对在`SSL Proxying Settings里面配置对应的要抓取的https网站`\n![image.png](https://i.loli.net/2021/01/20/hXfjpol7Sg5VLxY.png)\n# 三. 参考\n* [https://www.jianshu.com/p/14fdd1a2454a](https://www.jianshu.com/p/14fdd1a2454a)\n* [软件测试教程Charles抓包工具测试实战](https://www.bilibili.com/video/BV1mQ4y1N7dn?p=1)\n\n","tags":["network"]},{"title":"java-9-cms-gc","url":"/2020/12/06/java-9-cms-gc/","content":"\n# Java中9种常见的CMS GC问题分析与解决\n\n# 一. 背景\n\n*  主要针对 Hotspot VM 中“CMS + ParNew”组合的一些使用场景进行总结。重点通过部分源码对根因进行分析以及对排查方法进行总结，排查过程会省略较多，另外本文专业术语较多，有一定的阅读门槛，如未介绍清楚，还请自行查阅相关材料。\n<!--more-->\n*  [Java中9种常见的CMS GC问题分析与解决](https://tech.meituan.com/2020/11/12/java-9-cms-gc.html)\n\n","tags":["jvm"]},{"title":"springboot-rabbitmq-tutorials","url":"/2020/11/20/springboot-rabbitmq-tutorials/","content":"\n# 一. 背景\n\n*  `springboot`项目整合`rabbitmq `基础代码实现系统间解耦合，削峰填谷\n<!--more-->\n# 二. 原理\n\n## 死信队列 听上去像 消息“死”了     其实也有点这个意思，死信队列  是 当消息在一个队列 因为下列原因：\n\n* 消息被拒绝（basic.reject/ basic.nack）并且不再重新投递 requeue=false\n* 消息超期 (rabbitmq  Time-To-Live -> messageProperties.setExpiration()) \n* 队列超载\n# 三. 实现\n## 配置队列和exchange的绑定关系 RabbitmqConfig\n```java\npackage com.codewindy.mongodb.config;\n\nimport cn.hutool.core.map.MapUtil;\nimport com.codewindy.common.utils.RabbitmqConstant;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.*;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\n\n/**\n * @author codewindy\n * @date 2020-11-09 10:55 PM\n * @since 1.0.0\n */\n@Configuration\n@Slf4j\npublic class RabbitmqConfig {\n    /* -------------------------------定义oder_queue order_exchange的绑定关系-----------------------------------------------*/\n\n    @Bean(name = \"orderQueue\")\n    public Queue orderQueue() {\n        HashMap<String, Object> params = MapUtil.newHashMap(16);\n        params.put(RabbitmqConstant.X_DEAD_LETTER_EXCHANGE, RabbitmqConstant.DLX_EXCHANGE_NAME);\n        params.put(RabbitmqConstant.X_DEAD_LETTER_ROUTIN_KEY, RabbitmqConstant.DLX_ROUTING_ORDER_CANCEL);\n        //params.put(CommonConstant.X_EXPIRES,5000);\n        params.put(RabbitmqConstant.X_MAX_LENGTH, 10);\n        params.put(RabbitmqConstant.X_MESSAGE_TTL, 5000);\n        //params.put(CommonConstant.X_MAX_PRIORITY,4);\n        return QueueBuilder.durable(RabbitmqConstant.QUEUE_NAME).withArguments(params).build();\n    }\n\n    @Bean(name = \"orderExchange\")\n    public TopicExchange orderExchange() {\n        return ExchangeBuilder.topicExchange(RabbitmqConstant.EXCHANGE_NAME).durable(true).build();\n\n    }\n\n    @Bean\n    public Binding orderTopicExchangeAndQueue(\n            @Qualifier(\"orderExchange\") TopicExchange orderExchange,\n            @Qualifier(\"orderQueue\") Queue orderQueue) {\n        return BindingBuilder.bind(orderQueue).to(orderExchange).with(RabbitmqConstant.ROUTING_KEY_NAME);\n    }\n\n    /* -------------------------------定义死信队列dlx_oder_queue dlx_order_exchange的绑定关系----------------------------------*/\n\n    @Bean(name = \"dlxOrderQueue\")\n    public Queue dlxOrderQueue() {\n        return QueueBuilder.durable(RabbitmqConstant.DLX_QUEUE_NAME).build();\n    }\n\n    @Bean(name = \"dlxOrderExchange\")\n    public TopicExchange dlxOrderExchange() {\n        return ExchangeBuilder.topicExchange(RabbitmqConstant.DLX_EXCHANGE_NAME).durable(true).build();\n    }\n\n    @Bean\n    public Binding dlxOrderTopicExchangeAndQueue(\n            @Qualifier(\"dlxOrderExchange\") TopicExchange dlxOrderExchange,\n            @Qualifier(\"dlxOrderQueue\") Queue dlxOrderQueue) {\n        return BindingBuilder.bind(dlxOrderQueue).to(dlxOrderExchange).with(RabbitmqConstant.DLX_ROUTING_KEY_NAME);\n    }\n\n\n}\n\n```\n## RabbitmqConstant 常量定义防止取错参数\n```java\npackage com.codewindy.common.utils;\n\npublic interface RabbitmqConstant {\n    String  X_MESSAGE_TTL = \"x-message-ttl\";\n    String  X_EXPIRES = \"x-expires\";\n    String  X_MAX_LENGTH = \"x-max-length\";\n    String  X_MAX_PRIORITY = \"x-max-priority\";\n    /**\n     * 死信队列 交换机标识符\n     */\n    String  X_DEAD_LETTER_EXCHANGE = \"x-dead-letter-exchange\";\n    /**\n     * 死信队列交换机绑定键标识符\n     */\n    String  X_DEAD_LETTER_ROUTIN_KEY = \"x-dead-letter-routing-key\";\n\n    String DLX_EXCHANGE_NAME =\"dlx_order_exchange\";\n    String DLX_QUEUE_NAME =\"dlx_order_queue\";\n    String DLX_ROUTING_KEY_NAME =\"dlx.order.#\";\n\n    String DLX_ROUTING_ORDER_CANCEL =\"dlx.order.cancel\";\n\n\n    String EXCHANGE_NAME =\"order_exchange\";\n    String QUEUE_NAME =\"order_queue\";\n    String ROUTING_KEY_NAME =\"order.#\";\n    String ROUTING_ORDER_CANCEL =\"order.cancel\";\n}\n\n```\n## RabbitmqUtil 对rabbitmqTemplate封装\n```java\npackage com.codewindy.mongodb.utils;\n\nimport cn.hutool.core.util.IdUtil;\nimport com.codewindy.mongodb.service.impl.ConfirmCallbackServiceImpl;\nimport com.codewindy.mongodb.service.impl.ReturnCallbackServiceImpl;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.MessageDeliveryMode;\nimport org.springframework.amqp.rabbit.connection.CorrelationData;\nimport org.springframework.amqp.rabbit.connection.PublisherCallbackChannel;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.Assert;\n\nimport java.nio.charset.StandardCharsets;\n\n/**\n * @author codewindy\n * @date 2020-11-09 11:28 PM\n * @since 1.0.0\n */\n@Slf4j\n@Component\npublic class RabbitmqUtil implements InitializingBean {\n\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    public void sendMessage(String exchange, String routingKey, Object msg) {\n\n        /**\n         * 确保消息发送失败后可以重新返回到队列中\n         * 注意：yml需要配置 publisher-returns: true\n         */\n        rabbitTemplate.setMandatory(true);\n        //rabbitTemplate.setMessageConverter(new Jackson2JsonMessageConverter());\n        /**\n         * 消费者确认收到消息后，手动ack回执回调处理\n         */\n        //rabbitTemplate.setConfirmCallback(confirmCallbackService);\n\n        /**\n         * 消息投递到队列失败回调处理\n         */\n       // rabbitTemplate.setReturnCallback(returnCallbackService);\n        /**\n         * 发送消息\n         */\n        rabbitTemplate.convertAndSend(exchange, routingKey, msg,\n                message -> {\n                    message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);\n                    //message.getMessageProperties().setExpiration(\"5000\");\n                    message.getMessageProperties().setContentEncoding(StandardCharsets.UTF_8.name());\n                    //message.getMessageProperties().setPriority(4);\n                    return message;\n                },\n                new CorrelationData(IdUtil.fastSimpleUUID()));\n    }\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        rabbitTemplate.setConfirmCallback(new ConfirmCallbackServiceImpl());\n        rabbitTemplate.setReturnCallback(new ReturnCallbackServiceImpl());\n    }\n}\n```\n## 生产者发送消息producer 业务代码\n\n```java\nrabbitmqUtil.sendMessage(RabbitmqConstant.EXCHANGE_NAME,RabbitmqConstant.ROUTING_ORDER_CANCEL,\"我是消息, i miss u\");\n\n```\n\n## 消费者接收消息consumer 业务代码\n\n```java\npackage com.codewindy.mysql;\nimport com.codewindy.common.utils.RabbitmqConstant;\nimport com.rabbitmq.client.Channel;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.ExchangeTypes;\nimport org.springframework.amqp.core.Message;\nimport org.springframework.amqp.rabbit.annotation.*;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\n\n/**\n * @author codewindy\n * @date 2020-11-09 11:42 PM\n * @since 1.0.0\n */\n@Slf4j\n@Component\n@RabbitListener(bindings = @QueueBinding(\n        value = @Queue(name = RabbitmqConstant.DLX_QUEUE_NAME, durable = \"true\"),\n        exchange = @Exchange(name = RabbitmqConstant.DLX_EXCHANGE_NAME,\n                type = ExchangeTypes.TOPIC,\n                ignoreDeclarationExceptions = \"true\"),\n        key = {RabbitmqConstant.DLX_ROUTING_ORDER_CANCEL}\n))\npublic class ConsumerMessageHandler {\n\n    @RabbitHandler\n    public void messageHandler(String msg, Channel channel, Message message) throws IOException {\n\n        try {\n            log.info(\"消费者收到消息：{}\", msg);\n\n            //TODO 具体业务\n            //int i = 1/0;\n\n            channel.basicAck(message.getMessageProperties().getDeliveryTag(), false);\n\n        }  catch (Exception e) {\n\n            if (message.getMessageProperties().getRedelivered()) {\n\n                log.error(\"消息已重复处理失败,拒绝再次接收...\");\n                // 拒绝消息\n                channel.basicReject(message.getMessageProperties().getDeliveryTag(), false);\n            } else {\n\n                log.error(\"消息即将再次返回队列处理...\");\n\n                channel.basicNack(message.getMessageProperties().getDeliveryTag(), false, true);\n            }\n        }\n    }\n}\n```\n# 四. docker 安装rabbitmq相关配置\n## 安装rabbitmq以及相关操作\n* `sudo systemctl restart docker`\n* `docker pull rabbitmq:3.7.8-management`\n* ` docker run -d --name rabbitmq3.8.9 -p 5672:5672 -p 15672:15672  --hostname rabbitmq  -e RABBITMQ_DEFAULT_VHOST=/ -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin 镜像id`\n* docker ps 查看已启动的服务  `docker ps -a `查看所有\n* `docker exec -it  容器id bash` 进入rabbitmq容器内部\n* `rabbitmqctl reset` 重置服务\n* `rabbitmqctl stop_app` 停止服务   `rabbitmqctl start_app` 启动服务\n# 五. 参考\n* [springboot rabbitmq 之死信队列 延迟消费消息](https://my.oschina.net/10000000000/blog/1626278)\n* [springboot 集成rabbitmq](https://my.oschina.net/10000000000/blog/1624963)\n* [rabbitmq_ppt_reference](https://github.com/codewindy/mac_soft/blob/master/rabbitmq_ppt.zip)\n* [JavaTutorials](https://github.com/codewindy/JavaTutorials)\n","tags":["rabbitmq"]},{"title":"springboot-redis-tips","url":"/2020/11/20/springboot-redis-tips/","content":"\n# 一. 背景\n\n*  `springboot2.x` 之后默认redis客户端不是`jedis`而是`lettuce`但是在集群环境中如果有一个节点挂了就会导致服务不可用\n<!--more-->\n\n# 二. 解决\n```java\n# Example 37. Enabling periodic cluster topology view updates\nRedisClusterClient clusterClient = RedisClusterClient.create(RedisURI.create(\"localhost\", 6379));\n\n\nClusterTopologyRefreshOptions topologyRefreshOptions = ClusterTopologyRefreshOptions.builder()\n                                .enableAdaptiveRefreshTrigger(RefreshTrigger.MOVED_REDIRECT, RefreshTrigger.PERSISTENT_RECONNECTS)\n                                .adaptiveRefreshTriggersTimeout(30, TimeUnit.SECONDS)\n                                .build();\n\nclusterClient.setOptions(ClusterClientOptions.builder()\n                                .topologyRefreshOptions(topologyRefreshOptions)\n                                .build());\n...\n\nclusterClient.shutdown();\n\n```\n# 三. 参考\n* [redis整合letture自动拓扑更新](https://www.colabug.com/2020/0107/6815444/)\n* [SpringBoot2.X与redis Lettuce集成踩坑](https://juejin.cn/post/6844904039096778759)\n* [redis 字符串和SDS](https://blog.csdn.net/weichi7549/article/details/107621458)","tags":["redis"]},{"title":"springboot-elk-6.5.4","url":"/2020/11/04/springboot-elasticsearch-6.5.4/","content":"\n## springboot整合elk 并安装elasticsearch-analysis-ik分词器插件\n# 一. 背景\n* 业务中需要使用`ik分词`进行文章关键字搜索来查询对应的数据\n<!--more-->\n# 二. 步骤\n* 在服务上首先安装使用docker和 docker-compose\n* 根据最后面的docker-compose.yml拉取镜像创建服务器\n* 修改服务器配置\n  > docker-compose up -d 启动\n  >\n  > docker-compose logs -f 查看日志\n  >\n  > sudo sysctl -w vm.max_map_count=262144  **修改/etc/sysctl.conf 不然报错启动不来**\n* 安装分词器插件\n  > http://tomcat01.qfjava.cn:81/elasticsearch-analysis-ik-6.5.4.zip 加速下载包\n  > \n  > 执行命令安装 ./elasticsearch-plugin install  http://tomcat01.qfjava.cn:81/elasticsearch-analysis-ik-6.5.4.zip\n* `注意安装分词插件后需要重启服务器才能生效`\n***\n  ```yml\n      version: \"3.1\"\n      services:\n      elasticsearch:\n      image: daocloud.io/library/elasticsearch:6.5.4\n      restart: always\n      container_name: elasticsearch\n      ports:\n      - 9200:9200\n      kibana:\n      image: daocloud.io/library/kibana:6.5.4\n      restart: always\n      container_name: kibana\n      ports:\n      - 5601:5601\n      environment:\n      - elasticsearch_url=http://10.211.55.8:9200\n      depends_on:\n      - elasticsearch\n```\n  ***\n# 三. 参考\n* [elasticsearch-analysis-ik](https://github.com/medcl/elasticsearch-analysis-ik)\n* [docker和docker-compose安装](https://www.runoob.com/docker/docker-compose.html)\n* [Elasticsearch7使用详解](https://rstyro.github.io/blog/2020/09/10/Elasticsearch7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/)","tags":["java"]},{"title":"每周跑一次","url":"/2020/08/24/running-once-a-week/","content":"\n## 每周跑一次5km\n# 一. 背景\n*  年纪越来越大了，身体也有点肥胖起来了尤其是肚子，还是日常运动量不足导致的，所以需要加强体能训练\n*  2019年年底体重还是69kg左右，疫情后的现在体重稳定在72kg左右，的确随身携带着`游泳圈`也增加病症的风险\n<!--more-->\n\n# 二. 实践\n* 一般喜欢周末四处瞎游荡，一走就是好几公里或10几公里，但是并不会消耗太多的脂肪反而大腿更粗了\n\n* 有氧运动里面打篮球就排除了，因为个子矮也没多少场地，如果剧烈运动反而容易伤到脚踝和眼睛\n\n  ```\n  2020-10-11美年大健康体检报告\n  甲状腺结节->喝夏枯草颗粒\n  心率慢\n  胆红素偏高\n  尿素高\n  肝功能受损->那段时间经常加班熬夜\n  ```\n\n  \n\n* 最终选择每周跑步5km选择松软的专用跑道对膝盖的伤害会有所缓解，但是千万不要过量不然就适得其反了，我也是有过教训多休养一段时间身体会自然恢复的\n\n* 从2020年5月左右基本做到了坚持每周一次的运动量，其实 **<font style=\"color:black; background:yellow\"> 保持身体健康本身就是一项重要的投资，健康是1，其余的才是0，最后还是贵在坚持和自律</font>**\n\n* 截止到2021年其实跑步并不会让自己体重减下来可能是自己方法不对，但至少出汗后舒服了很多，其实跑多了也会伤及膝盖，后续要加强体能核心锻炼\n\n* ![IMG_9188.PNG](https://i.loli.net/2020/08/24/BfzRtqi6esDaJkH.png)\n\n* ![IMG_9194.PNG](https://i.loli.net/2020/08/24/eYvyZDRxTGJAtjg.png)\n\n* ![IMG_9189.PNG](https://i.loli.net/2020/08/24/k834c1hJsbqPxyw.png)\n\n","tags":["life"]},{"title":"学习理财和基金投资","url":"/2020/07/04/Investment-Funds/","content":"Investment Funds\n---\n\n* 随着自己快奔三了和身边同事都有在理财所以自己也关注和学习\n <!--more-->\n# 一. 复盘\n* [https://upsort.com/s/rank](https://upsort.com/s/rank) 关注每天前10\n* [https://upsort.com/](https://upsort.com/) 关注北向资金的动向\n* [招财大牛猫](https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MjM5MjAxNTE4MA==&scene=124#wechat_redirect)\n* 从小培育理财思维,收益10个点就半仓止盈\n* <font style=\"color:black; background:yellow\">宽货币宽信用前提下放水无熊市</font> 股市赚央行放水的钱 公司盈利和低吸高抛的钱 资产按1/3比例配置\n* 普通散户理财最大的优势在于 **耐心和时间成本** 前提是要**提前埋伏好对的低估标的物**\n```java\n 豪华邮轮撞冰山 买股票也只买低市盈率的蓝筹股, 比如招商银行, 平安之类的.\n 节假日后必跌,谨慎乐观的态度重点关注流动性趋势的变化 等各大机构和券商暴涨之后在空仓\n 投资理财基金 2900点就可以考虑跑路了\n 买房新房第一次18年 10年旧房\n 药茅和酱茅，慢熊市里拿着稳稳的。再加上纸茅、电茅、泥茅、真茅。\n  理性控制基金仓位加仓支付时需要知道这笔交易能接受亏损多少钱\n  购买比特币学习视频以及港股美股\n  买基金分20等分定期按比例定投, 不要一次性满仓, 基金赚的是未来的钱\n  周三无论涨跌不加仓 一般周四还会跌\n \n  学会股票/基金理财投资自己 看基金成长性和波动性低位入仓\n  坚持每周健身锻炼计划\n  新增固定资产提高被动收入\n\n// 茅20指数大蓝筹股\n贵州茅台、五粮液、恒瑞医药、迈瑞医疗、美的集团、\n格力电器、长江电力、海螺水泥、海天味业、招商银行、\n宁德时代、牧原股份、中国国旅、药明康德、爱尔眼科、\n三一重工、万华化学、智飞生物、长春高新，中国平安\n\n  每年过年期间暴跌到2600-2700点入场基金 及时止盈 2440\n  立讯精密 三一重工 茅台 平安 医药板块\n  多停下手机和玩乐静心思考复盘失败过程 熟悉工作中有价值的业务\n  第十一天视频观看长投温度 定期不定额 设置定投不同基金投资提醒\n  不要加入自我主观判断 克服贪婪和恐惧 投资收益复利在利用 确定每个月投资金额500元  确定投资基数  最低温度差》5度就切换指数基金 〉50度全部卖出\n  闲钱长期投资, 资产配置少亏少赚, 每年资产动态在平衡50%半仓策略\n    // 计算个人资产负债表和理财投入比例\n    （存量+增量的钱 ）*（100-年龄）= 10877\n    （存量+增量的钱 ）*（100-25）%= 11175每月投资金额\n    150000-4000*3 = 存量资金 /20个月= 6900\n    12000-4000=8000 增量资金/月\n```\n# 二. 收益\n* 其实投资基金过程中主要还是平衡好心态在贪婪和恐惧中选择自己能承受的亏损额度\n* 股市的本质 <font style=\"color:black; background:yellow\">解决企业的融资问题 能值得投资的只有5%</font> 4.19暴跌\n* 历史规律 **周四定投指数基金，一般周四都会跌的**\n* **及时反思复盘交易后的经历总结**,其实这周踏空提前清仓了导致收益不高，心态有的奔溃的确要好好反思一下\n  ![11593845185_.pic_hd.jpg](https://i.loli.net/2020/07/04/HX8hl4UBtyZNP5e.png)\n  ![331593922496_.pic.jpg](https://i.loli.net/2020/07/05/GkKzj5VO1oI2mp8.jpg)\n* **茅20每隔三个月更新**\n* ![81599576577_.pic_hd.jpg](https://i.loli.net/2020/09/08/XxbohLlpCuiwPZQ.png)\n* 目前从盈利6600 到现在20200908截止浮亏4000多，这个8-9月之间持续亏损了1w块钱，心态有点炸了，就当韭菜先交学费了，不知道后续会是什么情况，不过有的时候一直加仓一直跌到现在没子弹了，就很被动导致亏损增大\n*  ![景顺长城新兴成长混合_沪深300_易方达蓝筹精选混合型证券投资基金_基金对比_20210124_163003.png](https://i.loli.net/2021/01/24/zxUAX2rdSMZNJCa.png)\n* 截止目前时间20210101 `算了一下如果2020年一直拿着2800-2600买的基金到现在同期沪深300是27%的收益, 我在收益5.8%卖了那个时候19%的整体收益赚了4k多一直拿到现在估计有42%的收益本金1.6w的话收益是6800左右, 实际情况就是我7月份连续3天涨停10%/天的踏空快速拉升, 追高医药暴跌40%补仓到现在已经12w多了实际浮盈1k多，且不考虑到年前花的1k买衣服和请吃饭发红包和理财费800块等，如果真止盈交割还存在0.5%的手续费起码600多，总体来看实际是亏钱的. 争取2021上半年清仓吧！`\n* 截止时间`2021-01-21` 半导体和医药板块走强然后从`2020-11-29`开始一直到现在尤其是元旦后的那些天已经回到了累计1w多收益，恰好今天是周四于是昨天清仓了虽然今天医药板块还是有3个点的涨幅少了3k的收益但还是要坚持自己的交易体系，现在只留下了券商和红利etf指数一共 2w也不会担心市场波动了，实际到了2021-01-22截止医药板块又涨了8个点踏空5600，但是半导体也亏了，不过都清空了也就没啥好埋冤的，耐心等待下次的机会吧!\n  ![IMG_0743.PNG](https://i.loli.net/2021/01/21/roAtmZ1KLeVWH3D.png)\n# 三. 参考\n* [交易纪律](https://mednoter.com/two-rules-for-investment.html)\n* [“新印”的21万亿元人民币，都被谁拿走了](https://www.mg21.com/guide/?p=6309)\n* [中国投资者如何投资美国证券市场](https://www.cs.jhu.edu/~grant/investment.html)\n* [恒生AH股溢价指数(HK:HSAHP)](https://xueqiu.com/S/HKHSAHP) AH溢价指数<100的时候可以满仓干\n* [港元兑人民币即期汇率 ](http://gu.sina.cn/fx/hq/quotes.php?code=HKDCNY&from=wap) 港元兑人民币\n* [https://www.v2ex.com/t/731669](https://www.v2ex.com/t/731669)\n* [https://www.v2ex.com/t/731831](https://www.v2ex.com/t/731831)\n* [28 Plan_Of_Life](https://codewindy.github.io/efunds/28Plan-Of-Life.pdf) 理财笔记汇总\n* [恒大研究院-任泽平](http://pdf.dfcfw.com/pdf/H3_AP201906261336478343_1.pdf)\n* [海通证券宏观经济](https://www.htsec.com/jfimg/colimg/upload/20200609/85201591667410913.pdf)\n* [会空仓的祖师爷](https://xueqiu.com/4864403211) 空仓也是一种操作\n* [指数基金投资从入门到精通pdf](https://wws.lanzous.com/i6UMXeawtmh)\n* [理杏仁](https://www.lixinger.com/analytics/fund/jj/260108/260108/detail/fund-compare?selected-index-ids=1000000000300&start-date=2011-01-24&end-date=2021-01-24&compare-stock-ids=3000000005827) **景顺长城新兴成长混合_沪深300_易方达蓝筹精选混合型证券投资基金_基金对比以及查看上海机场**\n* [72法则](https://user.guancha.cn/main/content?id=355227)\n* [基金助手插件](https://rabt.gitee.io/funds/docs/dist/index.html#/Download)\n* [海通证券的研报](https://www.htsec.com/ChannelHome/2016102402/index.shtml)\n* [十问美债收益率](https://mp.weixin.qq.com/s/TzLhmZL3oqgKiP8QvlbSYw)\n* [易方达张坤投资逻辑](https://mp.weixin.qq.com/s/cWf-1HaQUEMHPkxOSA8tXA)\n* [深圳房子投资标的物 微信图片_20201115222106_66w_75m2.jpg](https://i.loli.net/2021/04/10/lEveRMrVgnhzI7T.jpg)","tags":["funds"]},{"title":"bug汇总","url":"/2020/07/04/Squashes-Bugs/","content":" Squashes  Bug\n---\n# 一. 需要注意⚠️的问题\n* 因为八进制导致的问题，开发中尽量使用String来定义code变量\n <!--more-->\n*  数据库字段和代码编写的过程中多注意 <font color=\"red\">数据可能包含多余的空格</font>导致的问题\n*  在前端传时间参数在后台需要进行处理TimeZone时区的问题\n\n```java\n      Integer code =001001;\n      // 结果确是 被转换成8进制code = 513\n      System.out.println(\"code = \" + code);\n      // 引入hutool依赖\n      DateUtil.beginOfDay(startDate);\n      DateUtil.endOfDay(endDate);\n```\n*  <font color=\"blue\">maven依赖项目common模块</font> 没有deploy到仓库, 导致打包的应用有代码没更新出错\n*  [**idea out build目录区别以及启动后代码和配置更新问题** ](https://m.jb51.net/article/196376.htm) \n*  开发规范 spotbugs p3c插件\n*  [angular.js 开发提交规范 ](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md)`git commit guidelines`\n*  需求串讲责任人开发\n*  1990年时间查询差1小时问题GMT+8\n*  harbor rancher chart配置\n*  sql 隐式转换int str不走索引\n*  requestParam 不能用post请求\n*  [一次web请求触发了哪些操作](https://nyimac.gitee.io/2020/12/10/URL%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%81%E7%A8%8B/)\n","tags":["java"]},{"title":"Linux 版本间区别","url":"/2020/05/18/Linux-kernel-diff/","content":"## Linux kernel diff\n\n# 一. 背景\n\n* Linux Kernel 各版本间的区别和特性\n<!--more-->\n\n# 二. 参考\n* [Linux 2.6-5.x区别](https://www.cnblogs.com/tcicy/p/8461344.html)\n","tags":["kernel"]},{"title":"RouterOS 常用配置优化和安全加固","url":"/2020/04/18/RouterOS-Optimized/","content":"\n## RouterOS-Optimized\n\n# 一. 背景\n\n*  软路由系统ros安装完后默认会开启很多服务如ssh web ftp等，同时也带来了被攻击的风险，我们需要优化相关的配置\n<!--more-->\n\n# 二. 解决\n```shell\n# 将默认用户名admin更改为其他名称\n/user set 0 name=myros\n# 设置高强度的密码(红色字体为密码请自行更改)\n/user set 0 password=“d*2bBsweUBe3@”\n# 设置admin用户允许通过某个IP地址进行登陆(这里允许设置单个IP或多个IP也可以是IP段)\n/user set 0 allowed-address=192.168.88.0/24\n# 只保留安全的服务\n/ip service disable telnet,f​​tp,www,api,api-ssl\n⚠️注意：该操作会禁用Telnet，FTP，WWW，API，API-SSL\n# 更改默认端口，这将立即停止大多数随机SSH暴力登录尝试\n/ip service set ssh port=220\n# 设置Winbox允许登陆的网段\n/ip service set winbox address=192.168.88.0/24\n# 禁用mac-telnet服务\n/tool mac-server set allowed-interface-list=none\n# 禁用mac-winbox服务\n/tool mac-server mac-winbox set allowed-interface-list=none\n# 禁用mac-ping服务\n/tool mac-server ping set enabled=no\n# 邻居发现\n# MikroTik邻居发现协议用于显示和识别网络中的其他MikroTik设备，禁用所有接口上的邻居发现\n# 禁用IPv4 的邻居发现协议\n/ip neighbor discovery-settings set discover-interface-list=none\n# 禁用IPv6 的邻居发现协议\n/ipv6 nd set [find] disabled=yes\n# 带宽服务器用于测试两个MikroTik路由器之间的吞吐量，请在测试后禁用它。\n/tool bandwidth-server set enabled=no\n# DNS缓存\n/ip dns set allow-remote-requests=no\n# 设置更安全的SSH访问，打开SSH强加密\n/ip ssh set strong-crypto=yes\n# 关闭 Proxy，Socks代理\n/ip proxy set enabled=no\n/ip socks set enabled=no\n# MikroTik UPnP服务（通用即插即用协议）\n/ip upnp set enabled=no\n# MikroTik自带的DDNS服务器（动态域名解析）\n# 如果不是使用的话请用以下命令禁用\n/ip cloud set ddns-enabled=no update-time=no\n# 某些型号的RouterBOARD有LCD模块用于信息显示。\n/lcd set enabled=no\n# 如果你的路由器不提供VPN服务，请用以下命令关闭VPN\n/interface l2tp-server server set enabled=no\n/interface pptp-server server set enabled=no\n/interface sstp-server server set enabled=no\n/interface ovpn-server server set enabled=no\n# 禁用在设备上使用Radius进行授权\n/user aaa set use-radius=no\n# ⚠️⚠️⚠️⚠️移除操作请慎用\n/radius remove numbers=[/radius find]\n# 清空log\n/system logging action set memory memory-lines=1\n/system logging action set memory memory-lines=1000\n\n\n\n/interface/wireless/export         \n# jul/08/2020 22:19:41 by RouterOS 7.0beta8\n# software id = xxx\n#\n# model = RBD52G-5HacD2HnD\n# serial number = xxx\n# 设置ntp服务器同步\n/system ntp client\nset enabled=yes\n/system ntp client servers\nadd address=139.199.215.251 \n# 203.107.6.88 alibaba\n\n# 开启dhcp 服务器\n/ip dhcp-server\nadd address-pool=dhcp disabled=no interface=bridge1 lease-time=1h name=dhcp1\n/ip dhcp-server network\nadd address=192.168.2.0/24 gateway=192.168.2.2 netmask=24\n\n\n# 优化hap ac2无线参数\n# C- is center of frequency e - is extension channel   example : frequency is 5100 and in eCee will be see (5080-e,5100-C,5120-e,5140-e)\n# fragmentation-threshold命令用来配置指定射频模板中的报文分段门限参数。缺省情况下，报文分段门限参数为2346Byte。应用场景配置合理的报文分段门限参数可以提高信道带宽的利用率。报文分段门限的设置需要用户根据实际情况进行选择，根据目前的发展趋势，建议用户采用较大值的门限。当报文分段门限设置过小时，报文就被分为多段传输，而在无线传输中，每传送一次都有较大的额外开销，因此信道利用率低,当报文分段门限设置过大时，长报文就不容易被分段，导致传输的时间长，出错的概率大，而一旦出错就要重传，因此会造成信道带宽的浪费。\n# ts-cts模式：当AP向某个客户端发送数据的时候，AP会向客户端发送一个RTS报文，这样在AP覆盖范围内的所有设备在收到RTS后都会在指定的时间内不发送数据。目的客户端收到RTS后，发送一个CTS报文，这样在该客户端覆盖范围内所有的设备都会在指定的时间内不发送数据。使用rts-cts方式实现冲突避免需要发送两个报文，报文开销较大。\n/interface wireless\nset [ find default-name=wlan1 ] country=china mode=ap-bridge ssid=tpy wireless-protocol=802.11\n/interface wireless security-profiles\nset [ find default=yes ] authentication-types=wpa2-psk eap-methods=\"\" group-key-update=1h mode=dynamic-keys supplicant-identity=MikroTik \\\n    wpa-pre-shared-key=a1234567 wpa2-pre-shared-key=a1234567\nadd authentication-types=wpa2-psk disable-pmkid=yes eap-methods=\"\" group-key-update=1h mode=dynamic-keys name=eda supplicant-identity=\"\" \\\n    wpa-pre-shared-key=a1234567 wpa2-pre-shared-key=a1234567\n/interface wireless\nset [ find default-name=wlan2 ] adaptive-noise-immunity=ap-and-client-mode band=5ghz-onlyac channel-width=20/40/80mhz-eeCe country=malaysia disabled=no \\\n    distance=indoors frequency=5300 hw-fragmentation-threshold=2346 hw-protection-mode=rts-cts installation=indoor keepalive-frames=disabled mode=\\\n    ap-bridge multicast-buffering=disabled multicast-helper=full security-profile=eda ssid=eda wireless-protocol=802.11 wps-mode=disabled\n/interface wireless nstreme\nset wlan2 enable-polling=no\n\n# masquerade NAT 地址转换\n/ip firewall nat\nadd action=masquerade chain=srcnat\n\n# 支持Wi-Fi隐藏\n[admin@jd] > interface/wireless/export \n# sep/27/2020 22:17:52 by RouterOS 7.1beta2\n# software id = U01C-6QKJ\n#\n# model = RBD52G-5HacD2HnD\n# serial number = CB390C02DA3C\n/interface wireless\nset [ find default-name=wlan1 ] country=china mode=ap-bridge ssid=tpy \\\n    wireless-protocol=802.11\n/interface wireless security-profiles\nset [ find default=yes ] authentication-types=wpa2-psk eap-methods=\"\" \\\n    group-key-update=1h mode=dynamic-keys supplicant-identity=MikroTik \\\n    wpa-pre-shared-key=a1234567 wpa2-pre-shared-key=a1234567\nadd authentication-types=wpa2-psk disable-pmkid=yes eap-methods=\"\" \\\n    group-key-update=1h mode=dynamic-keys name=eda supplicant-identity=\"\" \\\n    wpa-pre-shared-key=a1234567 wpa2-pre-shared-key=wifipwd\n/interface wireless\nset [ find default-name=wlan2 ] adaptive-noise-immunity=ap-and-client-mode \\\n    band=5ghz-onlyac channel-width=20/40/80mhz-eeCe country=malaysia \\\n    disabled=no distance=indoors frequency=5300 hide-ssid=yes \\\n    hw-fragmentation-threshold=2346 hw-protection-mode=rts-cts installation=\\\n    indoor keepalive-frames=disabled mac-address=44:F9:71:8F:74:D9 mode=\\\n    ap-bridge multicast-buffering=disabled multicast-helper=full \\\n    security-profile=eda ssid=emoji wireless-protocol=802.11 wps-mode=disabled\n/interface wireless nstreme\nset wlan2 enable-polling=no\n[admin@jd] > \n\n\n# kid control和hotspot 透传三层设备\n  将斐讯等totalstub终端设备当成上面的kid control 和hotspot设备来使用，配置相应的mac地址和规则，实现有效限制上网的功能\n```\n\n![411594219877_.pic_hd.jpg](https://i.loli.net/2020/07/08/tT6yiZQ5mSugUbG.png)\n![5g_wifi.png](https://i.loli.net/2020/07/11/bhL7oeHrIAQSawZ.png)\n\n# 三. 参考\n* [rosm.cn](https://rosm.cn/?p=670)\n* [路由表每日更新](http://www.tcp5.com/)\n* [RouterOS x86 1037u軟路由](https://kai3c.com/archives/291)\n* [**RouterOS脚本编写与WLAN无线教程v66e** PDF电子版](http://www.irouteros.com/wp-content/uploads/2019/10/RouterOS%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E4%B8%8EWLAN%E6%97%A0%E7%BA%BF%E6%95%99%E7%A8%8Bv66e.pdf)\n* [ROS 在线脚本生成器](http://tools.rosjb.com/)\n* [高厚网络](https://www.gaohou.com/soft.html)\n* [Koolshare hap ac2](https://koolshare.cn/thread-166316-1-1.html)\n* [AC6000](https://support.huawei.com/enterprise/zh/doc/EDOC1100064377/5fcf8329) ts-cts模式  fragmentation-threshold命令\n* [hAP ac²](http://www.irouteros.com/?p=282) https://www.ixbt.com/nw/mikrotik-hap-ac2-review.html\n* [routore-mikrotik-hap-ac-2](https://netflow.by/blog/inet-setup/1986-nastrojka-wi-fi-na-routore-mikrotik-hap-ac-2)\n* [Since routeros-all-2.9.51](http://www.mikrotik.com.ua/download/routeros/)\n* [RouterOS WiFi隐藏SSID和隔离WiFi客户端配置](http://www.irouteros.com/?p=637)\n* [RouterOS 802.11ac双频合一配置](http://www.irouteros.com/?p=356)\n* [MikroTik 60GHz无线设备（上）](http://www.irouteros.com/?p=414) 由于频率越高，受到环境影响越大，电磁波在空气中传播的时候频率高的电磁波，更容易被反射和吸收，下图是衰减系数表，随着频率增加，增益和距离的衰减系数会越来越大。因此60GHz的频率在室外的时候，特别容易受到高湿度和下雨天影响的原因\n* [ros6.com](http://ros6.com/)\n* [chr安装](http://www.clxp.net.cn/thread-17315-1-1.html)\n* [ROS6.43_x64.ova](https://www.myxzy.com/post-476.html)\n* [DDoS Protection ](https://help.mikrotik.com/docs/display/ROS/DDoS+Protection)\n* [mikrotik-unicode-ssid-generator](https://r-1.ch/mikrotik-unicode-ssid-generator.php) 支持`emoji`\n\n","tags":["life"]},{"title":"在线临时文件短信邮箱服务","url":"/2020/04/12/temp-file-sms-email/","content":"\n## Temp-File-SMS-Email\n\n# 一. 背景\n\n*  为了更好的使用便捷的在线服务同时保障自己的隐私，所以汇总了以下文件短信邮箱服务\n<!--more-->\n\n# 二.在线文件\n*  [cowtransfer.com](https://cowtransfer.com/)\n*  [send anywhere](https://send-anywhere.com/)\n*  [tmp.link ](https://app.tmp.link/)\n*  [filelist.cn](https://filelist.cn)\n\n# 三.在线短信\n* [http://ss.netnr.com/tempsms](http://ss.netnr.com/tempsms)\n* [www.zusms.com](https://www.zusms.com/)\n* [www.z-sms.com](https://www.z-sms.com/)\n\n# 四.在线临时邮箱\n\n* [10minutemail.net](https://10minutemail.net/)\n* [10minutemail.com](https://10minutemail.com/)\n* [http://ss.netnr.com/](http://ss.netnr.com/)\n* [不死鸟](https://hao.su/1492/#menu_index_6)\n* [https://9em.org](https://9em.org)\n* [https://bccto.me](https://bccto.me)\n* [maildrop.cc](https://maildrop.cc)\n* [https://8164.cc/#/emailList/all](https://8164.cc/#/emailList/all)\n","tags":["life"]},{"title":"Pinpoint 安装部署教程","url":"/2020/04/09/Pinpoint-APM-Manual/","content":"Pinpoint  APM  Manual\n---\n# 背景\n* 在日常开发过程中需要通过`APM(Application Performance Management)`工具来监控我们部署的应用服务是否稳定正常，目前常用的有`skywalking`和`pinpint`\n  <!--more-->\n ![性能对比截图](http://skywalking.apache.org/assets/img/Pinpoint-PK-skywalking.184b13d4.png)\n\n# 准备条件\n* [CentOS 7](http://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/)\n* [JDK1.8](https://injdk.cn/)\n* [IntelliJ IDEA](https://www.jetbrains.com/idea/download/#section=mac)\n* [Tomcat 9](https://mirror.olnevhost.net/pub/apache/tomcat/tomcat-9/v9.0.34/bin/apache-tomcat-9.0.34.tar.gz)\n* [pinpoint 的源码包](https://github.com/naver/pinpoint/archive/v2.0.1.zip)\n* [pinpoint-agent-2.0.1.tar.gz](https://github.com/naver/pinpoint/releases/download/v2.0.1/pinpoint-agent-2.0.1.tar.gz)  代理客户端\n* [pinpoint-collector-2.0.1.war](https://github.com/naver/pinpoint/releases/download/v2.0.1/pinpoint-collector-2.0.1.war)\n* [pinpoint-web-2.0.1.war](https://github.com/naver/pinpoint/releases/download/v2.0.1/pinpoint-web-2.0.1.war)\n* [hbase 2.2.4](http://hbase.apache.org/downloads.html)\n* [apache zooKeeper 3.6.0](https://downloads.apache.org/zookeeper/zookeeper-3.6.0/apache-zookeeper-3.6.0-bin.tar.gz) \n* 单机部署的话可以使用`hbase内置的zookeeper`如果使用外置的版本是`zookeeper3.5`以上需要注意会`默认占用8080端口做AdminServer`，你可以修改`zoo.cfg`来修改`admin.serverPort=9999`\n# JDK安装配置\n* 首先下载jdk，创建java 环境目录`mkdir -p /usr/local/java/`\n* 解压 `tar -xvf jdk-8u202-linux-x64.tar.gz -C /usr/local/java/`\n* 最后`vim /etc/profile` 添加\n\n```shell\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_202\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n\n# Hbase环境配置\n* 解压hbase  `tar -xvf hbase-2.2.4-bin.tar.gz`\n* 修改hbase的配置文件`vim /root/hbase-2.2.4/conf/hbase-env.sh` 中添加一行\n\n```\n 配置java_home\n export JAVA_HOME=/usr/local/java/jdk1.8.0_202/\n 使用外部zookeeper管理hbase\n export HBASE_MANAGES_ZK=flase\n```\n\n\n\n* 修改hbase的配置文件`vim /root/hbase-2.2.4/conf/hbase-site.xml` 中添加一行 \n\n```\n <configuration>\n      <property>\n          <name>hbase.rootdir</name>\n          <value>/root/hbase-2.2.4/data/hbase</value>\n      </property>\n      <property>\n          <name>hbase.zookeeper.property.dataDir</name>\n          <value>/root/hbase-2.2.4/data/zookeeper</value>\n      </property>\n      <property>\n          <name>hbase.master.port</name>\n          <value>60000</value>\n      </property>\n      <property>\n          <name>hbase.regionserver.port</name>\n          <value>60020</value>\n      </property>\n  </configuration>\n* 启动hbase  `cd /root/hbase-2.2.4/bin` 并执行`./start-hbase.sh`\n* 打开 `http://127.0.0.1:16010/master-status` 查看hbase web管控台\n* 导入pinpoint到hbase 即解压`pinpoint-2.0.1.tar.gz`后得到`/root/pinpoint-2.0.1/hbase/scripts/hbase-create.hbase `的sql文件并拷贝到`hbase的bin目录`\n* `./root/hbase-2.2.4/bin/hbase shell hbase-create.hbase `执行之后可以`status 'detailed'`查看数据\n```\n* 在浏览器打开查看hbase http://10.211.55.4:16010/master-status\n\n  ![Xnip2020-04-12_19-34-34_hbase.jpg](https://i.loli.net/2020/04/12/lhTfJuGYrSxb146.jpg)\n\n# 配置web和collector\n\n  ```\n* 解压tomcat `tar -xvf apache-tomcat-9.0.34.tar.gz`并重命名`cp -R apache-tomcat-9.0.34 web`\n* 修改tomcat 的默认端口号`vim /root/web/conf/server.xml`找到8080 修改成5050\n* 将web部署到webapps里面重命名为ROOT.war `cp -R pinpoint-web-2.0.1.war /root/web/webapps/ROOT.war`\n* 启动tomcat  `进入cd /root/web/bin`目录并执行`./startup.sh `\n* 修改ROOT.war 默认配置文件绑定zookeeper的实际地址\n  /进入目录 \n  cd web/webapps/ROOT/WEB-INF/classes/\n  修改hbase.properties中 \n  hbase.client.host=127.0.0.1\n  修改pinpoint-web.properties 中\n  pinpoint.zookeeper.address=127.0.0.1\n  进入目录\n  cd /root/web/webapps/ROOT/WEB-INF/classes/profiles/local\n  修改hbase-env.properties \n  hbase.client.host=127.0.0.1\n  修改pinpoint-web-env.properties \n  pinpoint.zookeeper.address=127.0.0.1\n  进入目录\n  cd /root/web/webapps/ROOT/WEB-INF/classes/profiles/release\n  修改hbase-env.properties \n  hbase.client.host=127.0.0.1\n  修改pinpoint-web-env.properties \n  pinpoint.zookeeper.address=127.0.0.1\n* collector基本和web配置步骤一致\n  ```\n# 配置agent\n```shell\n* 打包springboot项目并整合agent参数`java -javaagent:/root/pinpoint-agent-2.0.1/pinpoint-bootstrap-2.0.1.jar -Dpinpoint.agentId=应用服务名id -Dpinpoint.applicationName=应用服务名id -jar mongodb-1.0.jar`\njava -javaagent:/root/pinpoint-agent-2.0.1/pinpoint-bootstrap-2.0.1.jar -Dpinpoint.agentId=codewindy-mongodb -Dpinpoint.applicationName=codewindy-mongodb -jar mongodb-1.0.jar\n```\n![Xnip2020-04-12_20-05-48pinpoint_init.jpg](https://i.loli.net/2020/04/12/mvInzeOaYPy4QXf.jpg)\n![Xnip2020-04-12_20-06-41_pinpoint_callTree.jpg](https://i.loli.net/2020/04/12/mCT5Esp69j3DrlS.jpg)\n# 参考\n\n* [pinpoint 安装部署教程](https://github.com/ameizi/DevArticles/issues/166)\n* [pinpoint-agent-collector -web下载](https://github.com/naver/pinpoint/releases)\n* [skywalking vs pinpoint](http://skywalking.apache.org/zh/blog/2019-02-24-skywalking-pk-pinpoint.html)\n* [pinpoint原理和docker部署](http://www.tangrui.net/2016/pinpoint-plugin-development.html)\n","tags":["life"]},{"title":"雷雨天温度湿度会影响Wi-Fi","url":"/2020/01/29/weather-affect-your-wifi/","content":"## Weather Affect Your Wi-Fi\n\n# 一. 背景\n\n* 老家升级了光纤，但是没有光猫的超级管理员账号，无法查看和配置\n* 使用过程中发现一个问题，恶劣天气是否会影响Wi-Fi\n<!--more-->\n* 结论：**<font style=\"color:black; background:yellow\"> 有许多天气条件会严重削弱WiFi信号，但只会在室外条件下影响WiFi信号,降雨对WiFi信号的影响最大。你知道为什么吗？因为，无线电频率被雨滴吸收，并被雨滴部分阻挡，空气中的水分会打断路由器的信号的发送和接收。</font>**\n* \n```shell\n移动光猫账号： CMCCAdmin 密码：aDm8H%MdA\n华为的：telecomadmin 密码：admintelecom\n中国移动光纤宽带ip：192.168.100.1的超级账号：telecomadmin 密码：nE7jA%5m\n中国移动默认光猫超级管理员账号密码汇总\n已知：\n型号HS8545M5 可用\n```\n\n# 二. 参考\n* **由于频率越高，受到环境影响越大，电磁波在空气中传播的时候频率高的电磁波，更容易被反射和吸收**，下图是衰减系数表，随着频率增加，增益和距离的衰减系数会越来越大。因此**<font color=\"red\">60GHz的频率在室外的时候，特别容易受到高湿度和下雨天影响的原因</font>**\n* ![雨天的衰耗问题](http://www.irouteros.com/wp-content/uploads/2018/08/lhg60tu2.png)\n* [**型号HS8545M5**](https://www.itren.org/171.html)\n* [does-weather-affect-your-wifi](https://the-weather-station.com/does-weather-affect-your-wifi/)\n* [can-humidity-affect-a-wi-fi-signal](https://www.techwalla.com/articles/can-humidity-affect-a-wi-fi-signal)\n* [MikroTik 60GHz无线设备（上）](http://www.irouteros.com/?p=414)\n","tags":["wifi"]},{"title":"mac系统下安装mysql","url":"/2020/01/29/MacOS-MySQL-Config/","content":"MacOS MySQL Install & Config\n---\n# 一. 背景\n\n* [MySQL8 下载安装](https://segmentfault.com/a/1190000019689864)\n  <!--more-->\n* `F11 或者command +m 可以快速回到desktop`\n\n","tags":["mysql"]},{"title":"https 原理和应用","url":"/2020/01/14/principle-https/","content":"\n## Principles and Applications of https\n\n# 一. 背景\n\n* 理解http 和https 的区别\n* 理解http 1.0 和http 1.1 和http2.0 的区别\n* 在对外提供接口的情况下，如何设计和保证数据的安全可靠性\n<!--more-->\n# 二. 原理\n* [www.ichenpeng.net](http://www.ichenpeng.net/1176592)\n# 三. 应用\n```java\npackage com.codewindy.mongodb.utils;\n\nimport cn.hutool.core.date.DateUtil;\nimport cn.hutool.core.map.MapUtil;\nimport cn.hutool.crypto.SecureUtil;\nimport cn.hutool.crypto.asymmetric.KeyType;\nimport cn.hutool.crypto.asymmetric.RSA;\nimport cn.hutool.crypto.asymmetric.Sign;\nimport cn.hutool.crypto.asymmetric.SignAlgorithm;\nimport cn.hutool.http.HttpRequest;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\n\nimport java.util.HashMap;\n\n/**\n * @author codewindy\n * @date 2020-01-14 8:59 PM\n * @since 1.0.0\n * https://www.bookstack.cn/read/hutool/093507f34fe0715d.md\n */\npublic class TestAESByHutool {\n    public static void main(String[] args) {\n        //1. 生成公钥和私钥并指定加密type 和长度\n\n        RSA rsa = new RSA();\n        String privateKeyBase64 = rsa.getPrivateKeyBase64();\n        String publicKeyBase64 = rsa.getPublicKeyBase64();\n        System.out.println(\"keyPair.getPrivate() 私钥= \" + privateKeyBase64);\n        System.out.println(\"keyPair.getPublic() 公钥= \" + publicKeyBase64);\n\n        //2. 获取待加密的敏感原始数据\n        String content = HttpRequest\n                .get(\"https://api.myip.com/\")\n                //超时，毫秒\n                .timeout(20000)\n                .header(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)\n                .execute()\n                .body();\n        //3. 每次生成AES 16 位随机密码\n        String aesKey = RandomStringUtils.randomNumeric(16);\n        System.out.println(\"每次生成AES 16 位随机密码aesKey = \" + aesKey);\n\n        //4. 使用公钥加密 aes对称密码 后的key\n        String encryptAesKey = rsa.encryptBase64(aesKey, KeyType.PrivateKey);\n        System.out.println(\"使用公钥加密 aes对称密码 后的encryptAesKey = \" + encryptAesKey);\n        //5. AES 加密后的内容\n        String encryptContent = SecureUtil.aes(aesKey.getBytes()).encryptBase64(content);\n        System.out.println(\"AES 加密后的内容 encryptContent = \" + encryptContent);\n\n        Sign sign = SecureUtil.sign(SignAlgorithm.MD5withRSA);\n        byte[] signedContent = sign.sign(content.getBytes());\n        System.err.println(\"对原始数据进行签名signedContent = \" + signedContent);\n\n\n        // 模拟获取request对象里面的parameters\n        String urlPath = \"/admin/queryUserInfo\";\n        String httpMethod = \"POST\";\n        long clientTimeStamp = DateUtil.currentSeconds();\n        HashMap<String, Object> requestParams = MapUtil.newHashMap();\n        requestParams.put(\"urlPath\", urlPath);\n        requestParams.put(\"httpMethod\", httpMethod);\n//        requestParams.put(\"clientSign\", request.getClientSign());\n        requestParams.put(\"clientTimeStamp\", clientTimeStamp + \"\");\n        String sign2String = MapUtil.sortJoin(MapUtil.sort(requestParams), \"&\", \"=\", true);\n\n        String calculateSign = SecureUtil.hmacSha1(aesKey.getBytes()).digestHex(sign2String);\n//        calculateSign计算出来的sign和request 请求里面的参数clientSign进行比较，如果不一致说明数据被篡改了s\n\n        System.out.println(\"计算出来的sign和request 请求里面的参数clientSign 进行比较 = \" + calculateSign);\n        System.out.println(\"解密-----------------------------------------------------\");\n        //6. 使用私钥解密后的key\n\n        String decryptAesKey = rsa.decryptStr(encryptAesKey, KeyType.PublicKey);\n        System.out.println(\"使用私钥解密后的decryptAesKey = \" + decryptAesKey);\n        //7. 解密得到明文的 aes 对称密码 解密加密的content数据\n\n        String decryptContent = SecureUtil.aes(decryptAesKey.getBytes()).decryptStr(encryptContent);\n        System.out.println(\"解密得到明文的 aes 对称密码 解密加密的content数据 = \" + decryptContent);\n        //8. 签名和验签 https://hutool.cn/docs/#/crypto/%E7%AD%BE%E5%90%8D%E5%92%8C%E9%AA%8C%E8%AF%81-Sign\n\n        boolean verify = sign.verify(content.getBytes(), signedContent);\n        System.err.println(\"验签状态verify = \" + verify);\n    }\n\n}\n\n```\n\n# 四. 参考\n* [https://www.kancloud.cn/ichenpeng/blog/1176592](https://www.kancloud.cn/ichenpeng/blog/1176592)\n* [countdownLatch 使用](https://www.kancloud.cn/ichenpeng/blog/1094601)\n* [Hutool doc](https://hutool.cn/docs/#/)","tags":["web"]},{"title":"MacOS 配置JDK和Gradle环境变量","url":"/2020/01/02/MacOS-jdk-gradle/","content":"\n## MacOS JDK & Gradle & Maven Settings\n\n# 一. 背景\n\n* mac系统下配置开发环境变量\n\n<!--more-->\n# 二. 准备条件\n* [下载`jdk 1.8`](https://www.oracle.com/technetwork/java/javase/downloads/jdk13-downloads-5672538.html)\n* 国内镜像地址 [https://injdk.cn/](https://injdk.cn/)\n* [下载`gradle 4.10.3`](https://gradle.org/next-steps/?version=4.10.3&format=bin)\n* [下载`maven 3.6.3`](http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip)\n\n# 三. 步骤\n* `vim /etc/profile `然后按住`shift +G ` 添加以下脚本后执行`source /etc/profile`\n```shell\n  JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/\"\n  CLASS_PATH=\"$JAVA_HOME/lib\"\n  PATH=\".:$PATH:$JAVA_HOME/bin\"\n```\n* `vim ~/.bash_profile` 配置gradle 和maven\n```shell\n  export M2_HOME=/usr/local/maven3.6.3/\n  export PATH=$PATH:$M2_HOME/bin\n  GRADLE_HOME=/usr/local/gradle4.10.3\n  export GRADLE_HOME\n  export PATH=$PATH:$GRADLE_HOME/bin\n```\n* `vim ~/.zshrc` 在底部新增`source ~/.bash_profile`\n\n  ```shell\n  #gradle 配置阿里云加速\n  allprojects {\n      repositories {\n          maven { url 'https://maven.aliyun.com/repository/public/' }\n          mavenLocal()\n          mavenCentral()\n      }\n  }\n  #在maven 的settings.xml文件中配置jar包仓库本地地址 \n  <localRepository>/usr/local/xl_repo</localRepository>\n  #然后找到mirror配置以下\n  <mirror>\n      <id>aliyunmaven</id>\n      <mirrorOf>*</mirrorOf>\n      <name>阿里云公共仓库</name>\n      <url>https://maven.aliyun.com/repository/public</url>\n  </mirror>\n  ```\n\n  \n# 四. 参考\n* [aliyun mirror manual](https://help.aliyun.com/document_detail/102512.html?spm=a2c40.aliyun_maven_repo.0.0.361865e9b6VaFh)\n* [https://javalibs.com/](https://javalibs.com/) maven repository\n* [huaweiCloud mirrors](https://mirrors.huaweicloud.com/java/jdk/8u172-b11/)","tags":["mac"]},{"title":"Linux源码编译安装postgres","url":"/2019/12/28/install-postgresql-from-source-code/","content":"\n## install postgresql from source code\n\n# 一. 背景\n\n* 最近经常需要处理postgres数据库相关环境配置的事情，遂记录一下\n\n<!--more-->\n# 二. 步骤\n* [tecmint postgres tutorials](https://www.tecmint.com/install-postgresql-from-source-code-in-linux/)\n* [ubuntu apt-get install  postgres](https://www.tecmint.com/install-postgresql-on-ubuntu/)\n\n","tags":["postgres"]},{"title":"斐讯k2通过编程器刷breed后升级padavan固件","url":"/2019/12/15/k2-breed-padavan/","content":"## 斐讯k2路由器通过ch340编程板刷入breed\n\n# 一. 背景\n\n*  2017年在`jd自营`买的斐讯k2路由器自动更新固件到`22.6.532.231`，网络经常会出现卡顿，于是动了刷机的心思\n<!--more-->\n# 二. 准备条件\n* 先认真阅读这篇恩山论坛的教程  <font style=\"color:black; background:yellow\">[**航校门口二楼修**](https://www.right.com.cn/FORUM/thread-636761-1-1.html)</font>\n* 淘宝购买 ch340编程板并下载[相应的驱动](http://www.wch.cn/products/CH340.html )也可以找卖家要\n* 下载[tftpd32](http://tftpd32.jounin.net/ ) 服务器\n* 下载k2 对应的 [老毛子padavan 固件](https://github.com/hanwckf/rt-n56u/releases)/或[极玩固件](http://dl.geewan.com/)\n* 下载[xshell免费版](https://github.com/codewindy/mac_soft/blob/master/Xshell-6.0.0181p_2.exe.7z)或secureCRT或putty等可以连接 串口软件\n\n# 三. 操作\n* 关闭win10防火墙，总共需要关闭三个地方\n* 安装ch340驱动 `win+pause`打开win10属性后点击设备管理器里面会多一个串口，短接5v **注意接好线后只会亮一个红灯，我试了2个晚上，第一次错以为要三个灯全部亮，其实还是接线的问题浪费大量时间**\n* 插入ch340，并打开xshell按serial串口方式接入\n* 给k2路由器接电然后一直按9就行了，后面直接输入路由器的ip地址和breed.bin输入成功\n* 断电然后按住reset按钮5s 后 等路由器重启之后xshell会打印出`breed>`成功进入breed，后面可以刷入任意固件了\n# 四. 问题解决\n* `按9 没反应一直使用默认的3 启动的`是因为淘宝5块钱买的ch340 杜邦线是母对母，需要自己额外买母对公或者自己把线割开用铜丝接入**是线跟编程器接触不良导致的rx线信号没有传入，需要重新插好线，电源短接5v **\n* 刷完`padavan 老毛子固件`之后需要重置reset 到出厂设置，然后设置Wi-Fi 信号地区选择 **Australia**\n# 五. 参考\n* https://www.right.com.cn/FORUM/thread-636761-1-1.html\n* http://www.wch.cn/products/CH340.html 编程器板驱动\n* https://github.com/codewindy/mac_soft/blob/master/Xshell-6.0.0181p_2.exe.7z xhell 串口模式连接\n* http://tftpd32.jounin.net/ tftp服务器\n* https://github.com/hanwckf/rt-n56u/releases k2刷机固件\n* http://dl.geewan.com/ 极玩固件\n* https://github.com/codewindy/soft-common/blob/master/k2_breed_padavan.7z\n* http://opt.cn2qq.com/padavan/\n* https://www.right.com.cn/FORUM/thread-636761-1-1.html\n* www.duomingxing.com/down/mtk68.php\n* [k2p官改固件下载](https://www.mingjinglu.com/write/548.html)\n* [K2官改固件github下载](https://github.com/mayunbaba2/K2)","tags":["life"]},{"title":"MacOS 下 Terminal 设置代理上网","url":"/2019/11/21/Terminal-Proxy/","content":"MacOS Terminal Proxy Settings\n---\n\n# 一.  背景\n\n* 装完macos系统后，经常使用`Terminal`终端来写blog提交到github，但是老是丢包，最终通过代理来实现\n  <!--more-->\n\n# 二.  准备\n* [ShadowsocksX-NG](https://github.com/qinyuhang/ShadowsocksX-NG-R/releases)  软件并配置好可用的ssr节点\n\n# 三. 实现\n* 打开[https://www.diggui.com/](https://www.diggui.com/) 查询`github.com`的A 记录并添加到`sudo vim /etc/hosts`\n\n  ```shell\n  A:github.com@8.8.8.8\n  ; <<>> DiG diggui.com <<>> @8.8.8.8 github.com A\n  ; (1 server found)\n  ;; global options: +cmd\n  ;; Got answer:\n  ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 46485\n  ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n  \n  ;; OPT PSEUDOSECTION:\n  ; EDNS: version: 0, flags:; udp: 512\n  ;; QUESTION SECTION:\n  ;github.com.\t\t\tIN\tA\n  \n  ;; ANSWER SECTION:\n  github.com.\t\t59\tIN\tA\t140.82.113.4\n  \n  ;; Query time: 9 msec\n  ;; SERVER: 8.8.8.8#53(8.8.8.8)\n  ;; WHEN: Tue Jan 14 14:24:33 UTC 2020\n  ;; MSG SIZE  rcvd: 55\n  ```\n\n* 在`~/.zshrc `文件中配置\n```shell\n  alias setroxy='export http_proxy=http://127.0.0.1:1087;\n  export https_proxy=http://127.0.0.1:1087;'\n  alias unsetproxy='unset http_proxy https_proxy'\n  alias ip='curl cip.cc'\n```\n* 只配置git代理\n```shell\n #设置\n git config --global http.proxy 'socks5://127.0.0.1:1086' \n git config --global https.proxy 'socks5://127.0.0.1:1086'\n #取消\n git config --global --unset http.proxy\n git config --global --unset https.proxy\n git clone https://github.com/codewindy/blog.git --config \"http.proxy=127.0.0.1:1086\"\n \n \n #只对github.com\ngit config --global http.https://github.com.proxy socks5://127.0.0.1:1086\n\n#取消代理\ngit config --global --unset http.https://github.com.proxy\n\n#只对github.com\ngit config --global http.https://github.com.proxy socks5://127.0.0.1:7891\n\n#取消代理\ngit config --global --unset http.https://github.com.proxy\n```\n*  在斐讯k2路由器刷机geewan或者openwrt/LEDE等石像鬼系统，直接配置ssr节点在路由器里面实现全局代理\n![Xnip2019-11-22_21-36-42.jpg](https://i.loli.net/2019/11/22/2SZVI5WJmxYLdOP.jpg)\n# 四. 效果\n ![Xnip2019-11-21_22-02-55.jpg](https://i.loli.net/2019/11/21/NalKSW27cfmC5pR.jpg)\n\n# 五. 参考\n* [blog.naaln.com](https://blog.naaln.com/2019/03/terminal-proxy/)\n* [gist config ](https://gist.github.com/laispace/666dd7b27e9116faece6)\n* [https://www.diggui.com/](https://www.diggui.com/)\n","tags":["mac"]},{"title":"日常综合笔记","url":"/2019/10/28/daily-note/","content":"\n## Daily Note\n\n# 一. 身体健康最重要，也是基础\n\n* 跑步🏃 慢 45分钟 呼气吸气4步，长时间跑伤膝盖\n* 一周四次就好 跑前热身下蹲 卷腹\n  <!--more-->\n* luyten jd-gui\n* 宜信技术学院 阿里中间件\n* jvm jinfo  阿里巴巴arthas  Perfma \n* ros 重定向\n* etcher 跨平台usb安装\n* api网关只做服务发现 代理\n* mq幂等 数据库唯一性约束是最后一道防线\n* 等额本金 等额本息\n* enable右键插件\n* easyexcel导出excel插件 \n* wk2html生成pdf插件demo\n* 首付额外交钱 装修 物业 契税\n* 坚持下班后更新blog\n* 全民k歌\n* 出国旅游 车子 房子\n* Kafka flink clickhouse spark\n* synthing\n* ac ap接网线的方式实现拓展 有线级连组网\n* docsify 整理文档\n* git tag 学习\n* 理财2900指数以下 2800以下 2600以下 增加被动理财收入\n* fyi 供参阅\n* 大数据学习  尚硅谷bigdata \n* 解决mac 摄像头睡眠问题\n* 读书/健身 投资提升自己\n* nginx默认上传大小是1m 需要修改client_max_body_size 100M；\n* navicat 连接卡断 编辑连接开启keepalived 30\n* 避免久坐脂肪肝 甲状腺结节尿酸高 甘油三酯血粘度高\n* tableplus\n* ubuntu pastebin 在线\n* cip.cc 查询ip\n* camtasia使用录制分享视频提高口才\n* mac vim配置语法着色\n* file.pizza\n* xxl-job 任务调度\n* rolan \n* tablego\n* Apollo 配置\n* url.ipaiban.com 短链\n* en.haseecomputer.com 神船官网\n* sony a7 RIV \n* thinkpad x1 extreme gen2 Wi-Fi6\n* allatori 加密 charmsongo.cn\n* jasypt 加密enc\n* jps -l\n* jstack \n* jstat -gcutil pid 2000 代表2s\n* 光纤收发器  光纤交换路由设备\n* soft-common add routeros镜像 pppoe session截图\n* https://www.runningcheese.com/userscripts 好用的greasyfork script\n* https://tool.imiku.me/ssr_decode/ 在线解析\n* 更新ros blog地址为github \n* 13.pdf ros大玩家qq和b站视频链接🔗\n* `how do you spend your time `  [下载](https://www.youtube.com/watch?v=vZbzR7f7maI)\n* gradle复杂项目配置\n* postman 视频host \n* 聚簇锁引 主建索引 非聚簇锁引 非主键索引\n  ```shell \n  聚簇索引的叶子节点中保存整行记录 而非聚簇索引保存的是该行记录的主键的值 相比之下 非聚簇索引比聚簇索引小很多,count（ID）会比count(*)多一个是否是null的判断 \n  ```\n  \n  \n\n* **少糖少油少盐 早睡早起多吃水果常备保温杯多喝热水**","tags":["life"]},{"title":"Proxifier 全局代理","url":"/2019/10/14/Proxifier-MacOS-Setting/","content":"\nProxifier MacOS Setting\n---\n# 一.  背景\n\n* 装完macos系统后，一直不能像win10一样轻松上Twitter和Google，试了n种软件终于找到一种可用的方式\n  <!--more-->\n\n# 二.  准备条件\n* **license key for mac **  `P427L-9Y552-5433E-8DSR3-58Z68` \n* 下载   [Proxifier v2.24](https://proxifier.com/download/ProxifierMac.dmg) \n* 下载  配置文件 [proxifierRules4mac.ppx](https://github.com/codewindy/mac_soft/blob/master/proxifierRules4mac.ppx)\n* 下载  [shadowsocksX-NG-R8](https://github.com/codewindy/mac_soft/blob/master/ShadowsocksX-NG-R8.dmg)\n\n# 三.  安装\n* 先安装 `shadowsocksX-NG-R8`\n* 然后安装 `Proxifier` 并使用license注册\n* 然后导入配置文件`proxifierRules4mac.ppx`\n\n# 四.  效果\n* 已经能正常使用Google和Twitterrific了\n* ![Proxifier-Tutorial.jpg](https://i.loli.net/2019/10/14/EUSiaK9mWbBgNJH.jpg)\n# 五.  其他方式\n* 直接在`路由器geewan`[固件GF_PSG1218_K2 - bigwan 0.0.23-fix10 ](http://dl.geewan.com/%E5%85%A8%E9%83%A8%E5%8E%86%E5%8F%B2%E5%9B%BA%E4%BB%B6/0.0.23/)或者`极路由等LEDE `刷机里面配置好`ssr `代理即可全局上网，但是使用过程中发现灵活性较差\n* 直接使用chrome免费插件 [**skyzip**](https://github.com/codewindy/soft-common/blob/master/skyzip.crx)\n\n\n# 六.  免费节点\n\n* [几鸡-学习助理](https://ji-f.pw/signin) 台湾的学习免费节点网速很棒，注册需要能先上Google\n* [lncn.org](https://lncn.org/) 能满足日常使用，但需要配置hosts文件\n* [xueyun.club](https://xueyun.club/auth/register)\n* [freeyes.xyz](https://freeyes.xyz)\n  \n```shell\n  在本地host文件中将本站域名绑定到 69.194.14.16\n  安卓可下载 Hosts Go 添加 ， windows具体操作方法如下↓\n  目录：C:/Windows/System32/drivers/etc，记事本打开host文件\n  在最后一行添加(注意空格)： 69.194.14.16 lncn.org\n  win+R 输入cmd回车，执行： ipconfig /flushdns\n  重新刷新页面即可,如失效请还原host并用代理访问！\n  macOS/Linux 下直接 echo \"69.194.14.16 lncn.org\" >> /etc/hosts \n  export http_proxy=http://127.0.0.1:1087 经常会github连不上 可以curl cip.cc查看ip地址\n```\n# 七.  参考\n* [kagura.me](https://www.kagura.me/dev/20190324005534.html)   神楽\n* [lncn.org](https://lncn.org/)   免费节点\n* [几鸡-学习助理](https://ji-f.pw/signin) 台湾学习助理\n* [geewan](http://dl.geewan.com/%E6%96%90%E8%AE%AF%E8%B7%AF%E7%94%B1-Phicomm/%E6%9C%80%E6%96%B0%E5%85%8D%E6%8B%86%E6%9C%BA%E6%96%90%E8%AE%AFK1K2%E5%88%B7%E6%9E%81%E7%8E%A9%E5%9B%BA%E4%BB%B6%E6%95%99%E7%A8%8B.rar) 斐讯k2/极路由固件教程\n* [ClashX Pro](https://install.appcenter.ms/users/clashx/apps/clashx-pro/distribution_groups/public)\n* [v2ray-clients-download](https://tlanyan.pp.ua/v2ray-clients-download/)","tags":["mac"]},{"title":"安装win10双系统","url":"/2019/10/03/Dual-System-win10/","content":"\n## Dual System Boot win10 and MacOS\n\n# 一. 背景\n\n- 在安装完MacOS之后，发现不能上Google试了n种方式都失败告终，并且mac下载文件速度很慢、占用太多内存\n  <!--more-->\n- 因为z7-kp7gz电脑一到手就只安装了MacOS10.14.6 mojave，现在只需按照正常流程安装win10 企业版1809到机械硬盘上即可。\n\n* 先安装macOS后安装win10的好处就是不需要自己去重建uefi引导和创建200M以上的esp分区\n\n# 二. 准备\n\n* [msdn I tell you](https://msdn.itellyou.cn) 下载[win10企业版系统](ed2k://|file|cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso|4478906368|E7C526499308841A4A6D116C857DB669|/)，注意`intel cpu 6`代以后不支持win7了\n* 8G以上U盘一个\n* [**Universal-USB-Installer-1.9.8.9.exe** ](https://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/)请在win环境下格式化成fat32制作启动盘，否则会无法识别\n* **注意：** 西数固态sn750安装系统前使用`DiskGenius`格式化成GPT(GUID格式），否则会识别不出nvme的ssd\n\n# 三. 安装步骤\n\n* 按**F2** 进入bios或者**F7**引导项，选择win10安装u盘进入\n* ![Jietu20191003-115130安装引导0.jpg](https://i.loli.net/2019/10/03/adyUKQw6WrCJnXq.jpg)\n* 格式化机械硬盘的C盘，并点击一下步\n* ![Jietu20191003-114902安装引导.jpg](https://i.loli.net/2019/10/03/Xt8G1yuhC29LWlx.jpg)\n* 依次安装即可，重启后选择从硬盘启动，也可以拔出u盘\n* [win10激活工具HWIDGen v52.01](https://github.com/codewindy/soft-common/blob/master/HWIDGen%2030.10.rar)下载和[相应的驱动](http://www.hasee.com/Chinese/drivers/drivers/index.php/Download/Index/model.html?id=525)\n* 直接Win键+X，打开Windows Powershell输入以下命令\n```shell\n  slmgr /skms kms.03k.org\n  slmgr /ato\n  最后可以cmd命令输入”slmgr.vbs -dlv”来查看windows10激活状态。\n```\n* 最终效果如下\n![151570158264_.pic_hd.jpg](https://i.loli.net/2019/10/04/W59GQXP2SuvmEx1.png)\n* sn750 固态测速如下，感觉挺快的，质量一般\n![IMG_7039.PNG](https://i.loli.net/2019/11/20/AKyIxW2hPLsV6lX.png)\n# 四. 问题解决\n\n* 记得安装所有驱动，包括游戏管理中心的驱动，会在任务管理器的性能选项中显示2个独立显卡\n\n* 安装双系统之后重启进入win10会出现[时间差8小时](https://imac.hk/mac-os-x-windows-systme-time.html)\n* win+x 进入管理员cmd模式执行代码\n\n```shell\nReg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1/\n```\n\n* ![IMG_6635.PNG](https://i.loli.net/2019/10/03/P81dwv63MJDqzam.png)\n\n# 五. 参考\n* [永久激活win10企业版](https://www.isharepc.com/2137.html)\n* [msdn.itellyou.cn](ed2k://|file|cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso|4478906368|E7C526499308841A4A6D116C857DB669|/) Windows 10 Enterprise LTSC 2019 (x64) - DVD (Chinese-Simplified) 系统下载\n* [电脑店pe制作工具](https://u.diannaodian.com/)","tags":["win10"]},{"title":"黑苹果安装教程","url":"/2019/09/25/MacOS-Tutorial/","content":"MacOS Install Tutorial\n---\n# 一. 背景\n\n* 原先准备入手**thinkpad x1 extreme gen2**或**MacBook pro**，都需要额外买扩展坞迫于预算有限于是默默寻找黑苹果的适配机型**z7-kp7gz**\n  <!--more-->\n* 硬件信息如下 总共花了 **6249.9** RMB\n```javascript\n  | Component | Model                                                        |\n  | --------- | ------------------------------------------------------------ |\n  | CPU       | Intel Core(TM) i7-8750H                                      |\n  | GPU       | Intel UHD630 / Nvidia GTX1060 (Z7m 为 1050Ti；皆无法驱动)       |\n  | RAM       | Micron Crucial 8GB+16GB                                       |\n  | NVMe      | WD Black SN750 NVME SSD 500G                                  |\n  | SSD       | Phison SATA SSD 128G + 1T 机械硬盘                             |\n  | Wireless  | Intel AC9462/9560（无法驱动，已更换 BCM94360CS2）                |\n  | Ethernet  | Realtek RTL8168H                                             |\n  | Audio     | Realtek ALC269vc                                             |\n\n  # What's working\n\n  - 睿频、变频正常（使用 18 款 MacBook Pro SMBIOS，最低 800Mhz, 最高睿频 4.1GHz）\n  - Intel UHD630（已应用显存补丁，2048 MB）\n  - 亮度调节（可在设置中调节或使用 Fn+F11, Fn+F12 快捷键）\n  - I2C HID 触控板（需要正确驱动电池后才可以设置手势）\n  - 有线网卡\n  - 声音（ALC269vc, 使用 AppleALC 仿冒，注入 layout-id 为 88，外放、耳机、麦克风全部正常）\n  - 电池状态（现已使用 Clover Hotpatch 驱动）\n  - USB （使用 USBInjectAll + SSDT 驱动，3.0 5G/s 速度正常，Type-C 可用）\n  - 睡眠（使用 Clover Hotpatch 修复）\n  - etc.\n\n  注：以上情况基于 KP7GZ 系列机型；对于使用其它机型的用户，可能会有一些功能不正常，请用户测试后反馈。\n\n  # What's partial working\n\n  - 蓝牙 (需要热启动 macOS 才可用，即先进入 Winodws 后重启进入 macOS、或者在 macOS 下使用虚拟机模拟热启动过程，不支持 AirDrop.)\n\n  # What's not working\n\n  - 独立显卡（GTX1060， 目前没有适用于 Mojave 的 Nvidia WebDriver）\n  - 无线网卡（Intel AC9462 无解，使用蓝牙共享网络、USB共享网络或者USB网卡替代，或更换无线网卡）\n  - **HDMI/MiniDP（该模具 HDMI/MiniDP 直接由独显输出, 独显无法驱动，所以 HDMI/MiniDP 也无法使用）**\n  - 读卡器（读卡器走的 USB 2.0 外置，无法使用）\n\n  注：请注意，目前已知的**所有**同方模具神舟战神机型（包括但不限于本 EFI 支持的所有机型），自带的 Nvidia 显卡 (无论是 1050Ti, 1060 或所有 GTX 16/RTX 20 系显卡) ，在 10.13.6 版本下**皆无法被正常识别并驱动**。目前针对此问题没有任何解决方案。我们建议不要把大好青春浪费在研究驱动独显上。关于外接显示器的解决方案，请参见硬件兼容性报告。\n\n  **除非 Nvidia 官方更新 10.14 的 WebDriver，否则独显、HDMI 不可用的问题将无法解决，请避免再提类似的 issues.**\n```\n# 二. 准备条件\n\n* 一个8G以上 u盘\n* 下载刻录苹果系统MacOS到u盘的软件 [etcher](https://www.balena.io/etcher/)\n* 下载[黑果小兵](https://blog.daliansky.net/macOS-Mojave-10.14.6-18G87-Release-version-with-Clover-5033-original-image.html)制作好的Mac系统 [macos_mojave_10.14.6_clover5033](https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/)  ,下载完后注意校验文件的md5值一致,保证系统文件完整.\n* Z7-kp7gz [笔记本电脑对应的EFI](https://github.com/kirainmoe/hasee-tongfang-macos)\n* bcm94360cs2 NGFF转接卡 请自己淘宝\n\n# 三.安装过程\n\n* <font style=\"color:black; background:yellow\">注意安装过程中不需要安装多次，即第一次从u盘启动，格式化硬盘后后面都是boot from mac启动</font>\n* 将电脑 D面的11个螺丝取下，断开内置电源排线，替换内置的无线网卡Intel AC9560为淘宝165元买的白苹果`bcm94360cs2`，注意安装NGFF转接卡的时候固定螺丝用电胶带绝缘处理，黑白色的天线也需要替换，向上拔就行\n* ![IMG_6578.JPG](https://i.loli.net/2019/09/24/A1YPOstH7yBRUCN.jpg)\n* ![51569325210_.pic_hd copy.jpg](https://i.loli.net/2019/09/25/XIdeuJBRcy4pjri.jpg)\n* 注意首先按F2 进入bios将安全启动Secure Boot 改成 Disable\n* 然后插入u盘 按F7 从u盘启动开始进入安装引导\n* 点击磁盘工具，格式化需要安装的硬盘为apfs格式 GUID分区图\n* ![14.png](https://i.loli.net/2019/09/24/WBDbdaNM596Ei1o.png)\n* 后面的步骤一直点击下一步即可直到进入macos系统\n* 联网下载[clover configuration](https://github.com/codewindy/mac_soft/blob/master/Clover%20Configurator.zip)然后mount EFI分区，并替换成[github下载的z7-kp7gz](https://github.com/kirainmoe/hasee-tongfang-macos/releases/download/latest/kp7gz.zip)\n* ![Screen Shot 2019-09-25 at 9.57.17 AM.png](https://i.loli.net/2019/09/25/MunhEyB5LPKVsji.png)\n* ![Screen Shot 2019-09-25 at 9.59.26 AM.png](https://i.loli.net/2019/09/25/Mn6pEXtsLx2wFcW.png)\n* 执行以下优化shell脚本即可\n```shell\n  sudo sh -c \"$(curl -fsSL https://raw.githubusercontent.com/kirainmoe/hasee-tongfang-macos/master/Addons/optimize.sh)\"\n 新脚本 curl -fsSL https://efi.kirainmoe.com/installer > inst && chmod +x ./inst && sudo ./inst\n```\n\n# 五. 效果\n\n* 优化后的效果如下\n* ![Xnip2019-11-23_13-34-53.jpg](https://i.loli.net/2019/12/16/NTlkZQPOjeUH8nB.jpg)\n* ![Xnip2020-03-03_22-30-12_cpu](https://i.loli.net/2020/03/10/qoLNDKrF1BUXvjg.jpg)\n# 六. 问题解决\n\n* 常见：安装完成后重启发生内核 panic，卡在 `VTDecoderXPCService` 错误：请在 Clover 界面按 O，定位到显卡设置（带有 Graphics 字样），勾选 **inject-intel**，并修改 **-platform-id** 从 **0x12345678** 修改为 <font style=\"color:black; background:yellow\">0x3E9B0000</font>\n* ![IMG_1005.JPG](https://i.loli.net/2019/09/25/DicFNPE1T6hbzLx.jpg)\n* 因重新安装win10到sn750 nvme固态硬盘上会在clover 引导启动项会多出冗余，直接进入u盘安装的PE系统打开 bootice 找到多余的启动项，我这里多余的是`Phison SATA SSD`里面的EFI文件，然后重启电脑进入macOS系统，直接打开`clover configurator`软件加载EFI，然后删除Microsoft文件夹后再次重启即可。\n* ![IMG_9972.jpeg](https://i.loli.net/2019/11/20/EVbGyz3jLYalPcq.jpg)\n* ![Xnip2019-11-21_22-43-14.jpg](https://i.loli.net/2019/11/21/Ot82967gcQGFPWJ.jpg)\n\n\n# 七. 升级tips\n\n* <font style=\"color:black; background:yellow\">如果你是第一次替换完配置文件，或者你在系统内 OTA 更新了新版本的系统，那么请在终端中执行以下命令重建 kext 缓存，并重启电脑：</font>\n  ```javascript\n  sudo kextcache -i /\n  ```\n* 解决电脑睡眠后摄像头问题\n ```javascript\n  sudo killall VDCAssistant\n ```\n* 解决macOS安装外部软件的问题\n ```javascript\n  sudo spctl --master-disable\n  control + space 空格 切换系统自带输入法\n  sudo scutil --set HostName  windys-MacBook-Pro 修改电脑host名称 跟linux系统修改不同\n ```\n* 系统升级到Catalina10.15.1之后偶尔会卡死在GUI桌面上\n  ```javascript\n      sudo shutdown -h now  \n      sudo reboot\n  ```\n* macOS系统vim语法和配置刷新dns\n  ```javascript\n      cp -r /usr/share/vim/vimrc ~/.vimrc\n      echo \"syntax on\">>~/.vimrc\n      sudo killall -HUP mDNSResponder;\n      sudo killall mDNSResponderHelper;\n      sudo dscacheutil -flushcache\n  ```\n* [正确开启HIDPI](https://hackintosh.kirainmoe.com/an-zhuang-hou/chang-yong-ming-ling-he-you-hua#zheng-que-kai-qi-hidpi)\n  \n```shell\n  #注意必须使用 1424x802 的分辨率，才能在休眠唤醒的时候不遇到四分之一屏和花屏。\n    #使用以下代码开启（来自小米 Pro 的仓库）：\n    #修改分辨率可以直接在系统设置里面选择显示Display来勾选对应的尺寸\n  sh -c \"$(curl -fsSL https://raw.githubusercontent.com/daliansky/XiaoMi-Pro-Hackintosh/master/one-key-hidpi/one-key-hidpi.sh)\"\n\n  #如要恢复，删除 #/System/Library/Displays/Contents/Resources/Overrides/DisplayVendorID-9e5 即可。如果你是 Catalina 以上系统，你可能需要进入 Recovery 模式下挂载系统分区操作\n  cd /Volumes/\"Your System Disk Part\"/System/Library/Displays/Contents/Resources/Overrides\n  rm -rf ./DisplayVendorID-9e5\n  cp -r ./backup/* ./\n```\n* [在macOS系统下右键点击](https://zh.wikihow.com/%E5%9C%A8Mac%E4%B8%8A%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB) \n```shell\n    1. 直接按住control 并点击trackpad 触摸板\n    2. 通过在设置里面找到trackpad 进行设置point&click 找到Secondary click 选择自己喜欢的方式即可\n```\n* 解决 10.14 以上系统字体渲染模糊\n  ```shell\n  defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO\n  ```\n\n\n# 八. 参考\n* [黑果小兵](https://blog.daliansky.net/) 下载MacOS 和 tutorial\n* [kirainmoe 战神kp7gz](https://github.com/kirainmoe/hasee-tongfang-macos)下载 EFI 和安装运到的问题\n* [mac软件下载 国外](https://macdownload.org/) \n* [mac精品软件下载](https://macwk.com/)\n* [精品mac应用分享](https://xclient.info/)\n* [https://aneeo.com/ios ](https://aneeo.com/ios)\n* [hasee kp7gz](http://en.haseecomputer.com/PC/detail_1078.html)\n* [macAppDownload.com](https://www.macappdownload.com/cleanmymac-x/)\n* [appsTorrent.ru](https://www.appstorrent.ru/programs/)\n* [macwk](https://macwk.com/)\n* [Clover Configurator](https://mackie100projects.altervista.org/)\n","tags":["mac"]},{"title":"中島 みゆき","url":"/2019/05/12/中島みゆき/","content":"* `《無家可歸的小孩》家なき子 `\n  <!--more-->\n\n   [中島 みゆき](https://www.miyuki.jp/)\n   --\n* `中岛美雪91首精选`\n<iframe width=\"560\" height=\"315\" src=\"https://www.bilibili.com/video/av47704670?from=search&seid=10905959108083544668\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n* `【MV】中岛美雪 -空と君のあいだに 中日字幕版 `\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/T90kWv7_zwk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n参考\n--\n* [中島みゆき オフィシャルサイト](https://www.miyuki.jp/s/y10/?ima=2257)\n* [https://music.dmkt-sp.jp/album/A2000230558](https://music.dmkt-sp.jp/album/A2000230558)\n\n","tags":["life"]},{"title":"Java-Learning-Video","url":"/2019/04/16/Java-Learning/","content":"以下视频等资源仅供自己翻阅复习\n---\n* **java编程**\n* 【idea版本2019java就业班】 链接: https://pan.baidu.com/s/1gBV-EfRsql7UWZJ6NFbrig 提取码: 24xw \n* 【冯佳java基础】 链接: https://pan.baidu.com/s/1PWcnlD1Pvq-P5V0XR7NAoA 提取码: tq2a \n\n<!--more-->\n*  [极客时间_Goole Drive](https://drive.google.com/drive/folders/1KwXsGZmU5Xu49yG_BkSJohNuWfyE_96P) 链接： https://drive.google.com/drive/folders/1KwXsGZmU5Xu49yG_BkSJohNuWfyE_96P\n* 【传智大数据就业班完整版】 链接: https://pan.baidu.com/s/10aGKUQYWPdYc3Ijx04gzjQ 提取码: srev \n* 【RabbitMQ消息中间件技术精讲】 链接: https://pan.baidu.com/s/1Ob5OFHuO1QOjBNTclsC8Xg 提取码: mg8t \n* 【尚硅谷Java核心基础_2019年版】 链接: https://pan.baidu.com/s/1fDwPoilaWhKi2AuVSJ1EBw 提取码: tryd \n* 【Java并发编程与高并发解决方案(完整)】 链接: https://pan.baidu.com/s/1v-O6I3hx2ogiscKhYi_jhA 提取码: s6eu \n* 【Kali Linux Tutorials】 链接: https://pan.baidu.com/s/1sJfETUvw9RTc5kyqP3qJ3A 提取码: puny \n* 【黑马c++全栈培训第24期】 链接: https://pan.baidu.com/s/1DSqfvEu8YVbKcPv6qzeA7g 提取码: 1d2p\n* 【葉子先生_ALL】 链接: https://pan.baidu.com/s/1keNhN4azjwBRlHILJhV48A 提取码: p12i\n* 【张志君 Mybatis+SpringMVC】 链接: https://pan.baidu.com/s/1Yndl_a8SaBcu5HnyK-nqqw 提取码: zi92 \n* 【RouterOS tutorials】 链接: https://pan.baidu.com/s/1W99FZfTKYuvpipINlKQxBw 提取码: 37hy \n* 【尚硅谷大数据技术之Spring 事务的传播行为】 链接: https://pan.baidu.com/s/11fyM2skl2VMjlt9S80xXgA 提取码: nygj  \n* 【尚硅谷SpringCloud视频】 链接: https://pan.baidu.com/s/1cuznabCfvA36lBSSSM0fzw 提取码: suqc \n* 【Spring Cloud微服务实战】 链接: https://pan.baidu.com/s/1EOm95PDwlpUlzgIOfR4WnA 提取码: 9ysb  \n* 【长投理财_ALL】 链接: https://pan.baidu.com/s/154u0B8b6aGFKahRrwzcPng 提取码: a861\n","tags":["java"]},{"title":"打不开网页,重置ie浏览器","url":"/2018/12/15/reset-ie-broswer/","content":"\n## 重置ie浏览器\n\n# 一. 背景\n\n*  电脑设置代理关掉后会经常出现不能打开网页的情况\n<!--more-->\n\n# 二. 解决\n* 在win10下新建一个bat脚本文件并执行\n```shell\n  @echo off\n  rundll32 inetcpl.cpl ResetIEtoDefaults\n  set p=rundll32 inetcpl.cpl ResetIEtoDefaults\n  set q=reset successful\n  echo %p%\n  echo %q%\n  )\n  pause\n```","tags":["life"]},{"title":"Linux操作系统加固和经验总结","url":"/2018/11/21/Aliyun-Linux-tips/","content":"\n## Linux tips from aliyun\n\n# 一. 背景\n\n* 整理出开发中常见的笔记，发现阿里云上有已经很不错的参考文档\n* 前几天同事`rm -rf  /data/`不小心删除了服务器的文件导致了事故\n<!--more-->\n* ![Xnip2019-11-21_22-08-49.jpg](https://i.loli.net/2019/11/21/idqaSKc9sgMHeQR.jpg)\n# 二. 步骤\n* 以后执行rm -rf 替换成mv /tmp目录，然后再写crontab script 每隔7天定时清空/tmp\n```shell\n1. 在/usr/local/bin/目录下vim rm2tmp.sh\n  TRASH_DIR=/tmp/.trash\"  \n  for i in $*; do  \n  STAMP=`date +%m-%d-%H:%M:%S`  \n  fileName=`basename $i`  \n  mv $i $TRASH_DIR/$fileName.$STAMP  \n  done\n2. vim ~/.bashrc 在底部添加 alias rm=\"sh /usr/local/bin/rm2tmp.sh\"\n   然后source ~/.bashrc\n3. 最后 crontab -e 新增 0 2 * * 0 rm -rf /tmp/.trash 每周日凌晨2点删除/tmp目录下的垃圾文件\n```\n* `find ./ sort | xargs md5` 查看当前目录下排序后的文件md5\n\n* `ubuntu`修改默认内核版本以及禁止自动升级 `https://www.jianshu.com/p/c76bc5e113f1`\n\n* `ubuntu` 默认`desktop`版本会安装dnsmasq，修改`/etc/resolv.conf`重启后不会生效\n\n  ```shell\n  # cat /etc/resolv.conf \n  # Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)\n  #     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN       注意看：\n  \n  1 /etc/resolv.conf 其实是一个Link\n  \n  它其实指向的是 /run/resolvconf/resolv.conf \n  \n  3 如果想自己定义 nameserver，那么有以下2个办法：\n  \n  A 在网卡的配置文件/etc/network/interfaces 里面加：\n  \n  dns-nameservers 192.168.3.45 192.168.8.10\n  \n  dns-search foo.org bar.com \n  \n  重启网络\n  \n  sudo service networking restart \n  或者\n  sudo /etc/init.d/networking restart\n  也可以重启网卡\n  sudo ifconfig eth0 down \n  sudo ifconfig eth0 up\n  \n  \n  B 修改 resolvconf服务的配置文件: /etc/resolvconf/resolv.conf.d/base \n  \n  echo \"search test.com\" >> /etc/resolvconf/resolv.conf.d/base \n  echo \"nameserver 202.106.0.20 \" >> /etc/resolvconf/resolv.conf.d/base \n  这样，在机器重启或 resolvconf 服务重启 都可以保证配置会写到/etc/resolv.conf 里面 \n  \n  重启 resolvconf 服务\n  \n  service resolvconf restart\n  \n  A比B的优先级更高,,不过可能会断网.\n  ```\n\n  \n# 三. 参考\n* [ Linux操作系统加固](https://help.aliyun.com/knowledge_detail/49809.html)\n","tags":["life"]},{"title":"iPhone 广告限制🚫","url":"/2018/11/04/ios-adblock/","content":"\n## iPhone广告问题处理\n\n# 一. 背景\n\n* 目前日常使用的是2018年5月份在香港🇭🇰中环ifc一楼apple store购入的iPhone 8 plus港版256G\n* 经常会在淘宝和京东或Safari等浏览器app上看到自己说过或者查询过的商品，一开始还以为是大数据推荐算法，后面发现其实更改一下设置即可屏蔽`advertisement`\n\n<!--more-->\n\n# 二. 解决\n* 打开**设置**  选择**隐私**  然后选中**广告**\n* ![IMG_6751.PNG](https://i.loli.net/2019/11/04/dGfhZquQWbVL1mR.png)\n* 打开限制广告追踪即可屏蔽掉广告\n* 还可以在jd或者taobao等app上 逐一关闭语音和相机📷允许按钮","tags":["iPhone"]},{"title":"善于搜索自己需要的资源","url":"/2018/09/03/MASTER-OF-SEARCH/","content":"MASTER OF SEARCH\n---\n## 学会获取自己想要的学习资源\n* http://pandownload.com/ 下载并保存资源到百度云\n* https://yandex.ru/ 俄罗斯的搜索引擎,一般用于搜索开发中运到的bug等\n* https://rsload.net/  一般用于下载win软件的时候使用的帐号密码都是**rsload.net**\n* https://sm.ms/  免费好用的图床\n* <!--more-->\n## 下载安装后登录百度账号就可以了\n*  [pandownload ](http://pandownload.com/)下载后在里面搜索**一般用于找java开发、极客时间等资源**\n*  [亿寻v0.1.0065.zip](https://www.lanzous.com/i7xao2b)\n*  ![截图如下](https://i.loli.net/2019/09/03/SMr6m3qGyXRVAJ7.png)\n* https://rsload.net/  一般用于下载win软件的时候使用的帐号密码都是**rsload.net**\n* ![rsload.net](https://i.loli.net/2019/09/04/mIvdk5W4yc8VZpM.png)\n* [https://jd.ma/](https://jd.ma/) 在`https://t.me/JDMa1`里面有很多百度云java等资源链接\n* [https://shikey.com/](https://t.me/shikeycom) \n* [百度云下载加速工具](https://alkt.lanzoui.com/iDWoxgdkowf)\n\n","tags":["life"]},{"title":"RouterOS抓包恢复PPPOE密码","url":"/2018/05/01/RouterOS_PPPOE_PacketSniffer/","content":"RouterOS PPPOE(Session) Password Packet Sniffer \n---\n# 背景\n* 老家的破旧路由器跟不上现在的需求,想升级成更好的,但是宽带密码忘了,管理员密码也不记得了,如何恢复**PPPOE**密码?\n<!--more-->\n# 准备条件\n* 安装了虚拟机**VMware**的电脑并导入[routeros6.44.2](https://github.com/codewindy/soft-common/blob/master/MikroTik-RouterOS-6.44.2_crackzsoft.com.ova)镜像或淘宝**rb750gr3**等\n* 网线一根\n* [VMWARE 虚拟机](https://rsload.net/soft/10943-vmware-workstation.html) 下载\n* [wireshark](https://2.na.dl.wireshark.org/win64/Wireshark-win64-3.0.1.exe) 下载\n*  [winbox ](https://mikrotik.com/download#) 客户端\n\n# 过程\n* 考虑到我买的rb750gr3不具有通用性及经济实惠性,我后面都采用虚拟机来实现\n  ![2019-05-02_153951_000.png](https://i.loli.net/2019/05/02/5ccaa3bb59313.png)\n\n  ![2019-05-02_150656_001.png](https://i.loli.net/2019/05/02/5ccaa3bc747cc.png)\n\n  ![2019-05-02_151738_002.png](https://i.loli.net/2019/05/02/5ccaa3be60e45.png)\n\n  ![2019-05-02_152312_003.png](https://i.loli.net/2019/05/02/5ccaa3bd57277.png)\n* 先将家里老旧路由器的  <font style=\"color:black; background:yellow\"> WAN口 </font>  插上网线连接到电脑的 **RJ45网口** \n* 打开虚拟机**vmware** 导入 [routeros 镜像](https://github.com/codewindy/soft-common/blob/master/MikroTik-RouterOS-6.44.2_crackzsoft.com.ova), 桥接到**`物理网卡`**\n* 下载并打开**winbox**客户端,并通过**winbox** 来登录ros,默认帐号是 **admin** 密码是 **空**\n\n  ![2019-05-02_152916_004.png](https://i.loli.net/2019/05/02/5ccaa3be54129.png)\n\n  ![2019-05-02_153222_005.png](https://i.loli.net/2019/05/02/5ccaa3becc873.png)\n  \n  ![2019-05-02_153852_007.png](https://i.loli.net/2019/05/02/5ccaa3ba5e19d.png)\n\n```shell\n[admin@fsm] > ip export \n# may/02/2019 15:45:48 by RouterOS 6.44.2\n# software id = ZJ3M-ESHW\n#\n/ip pool\nadd name=pool1 ranges=10.16.0.2-10.16.0.254\n/ip address\nadd address=192.168.199.22/24 comment=defconf interface=ether1 network=192.168.199.0\nadd address=192.168.199.122/24 interface=ether1 network=192.168.199.0\n/ip cloud\nset update-time=no\n/ip dhcp-client\nadd dhcp-options=hostname,clientid disabled=no interface=ether1\n/ip dns\nset allow-remote-requests=yes servers=192.168.199.1\n/ip firewall nat\nadd action=masquerade chain=srcnat out-interface-list=WAN\n/ip route\nadd disabled=yes distance=1 gateway=192.168.199.1\n[admin@fsm] > ppp export \n# may/02/2019 15:45:52 by RouterOS 6.44.2\n# software id = ZJ3M-ESHW\n\n/ppp profile\nadd dns-server=223.5.5.5 local-address=10.16.0.1 name=8M remote-address=pool1\n```\n\n# 原理\n* **chap ** 认证过程是md5加密的,但是**pap **是明文认证方式,所以我们通过ros伪造**pppoe**服务器来抓包获取\n* [PPP-PAP认证原理](http://blog.sina.com.cn/s/blog_5384e78b0100fhno.html)\n* [PPP-CHAP认证原理](http://blog.sina.com.cn/s/blog_5384e78b0100fhnr.html)\n  >PPP提供了两种可选的身份认证方法：口令验证协议PAP（Password Authentication Protocol，PAP）和质询握手协议（Challenge Handshake Authentication Protocol，CHAP）。如果双方协商达成一致，也可以不使用任何身份认证方法。　　CHAP认证比PAP认证更安全，因为CHAP不在线路上发送明文密码，而是发送经过摘要算法加工过的随机序列，也 被称为\"挑战字符串\".如图所示。同时，身份认证可以随时进行，包括在双方正常通信过程中。因此，非法用户就算截获并成功破解了一次密码，此密码也将在 一段时间内失效\n![chap认证过程](https://i.loli.net/2019/05/02/5cca8c8d6a894.jpg)) \n\n\n* **使用Java代码来创建和解析出账号密码**\n ![PPPoE processon](https://i.loli.net/2020/04/05/tlpzI5nU2fwXQbu.png)\n* [项目地址](https://github.com/codewindy/JavaTutorials) `https://github.com/codewindy/JavaTutorials`\n\n\n```java\npackage com.codewindy.mongodb.service.impl;\n\nimport cn.hutool.core.date.DateUtil;\nimport cn.hutool.core.io.FileUtil;\nimport cn.hutool.core.util.CharsetUtil;\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.extra.ssh.JschUtil;\nimport cn.hutool.extra.ssh.Sftp;\nimport com.codewindy.mongodb.pojo.ApiResult;\nimport com.codewindy.mongodb.pojo.PppoeDetail;\nimport com.codewindy.mongodb.service.MikrotikService;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport me.legrange.mikrotik.ApiConnection;\nimport me.legrange.mikrotik.MikrotikApiException;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n * @author codewindy\n * @desc <a href=\"https://wiki.mikrotik.com/wiki/Manual:RouterOS_features\">RouterOS_features</>\n *       RouterOS is MikroTik's stand-alone operating system based on linux v3.3.5 kernel.\n * @date 2020-03-25 9:44 PM\n * @since 1.0.0\n */\n@Service\n@Slf4j\npublic class MikrotikServiceImpl implements MikrotikService {\n    /**\n     * @param username\n     * @param password\n     * @return\n     */\n    @Override\n    public ApiResult login(String username, String password) {\n        ApiConnection con = null;\n        // connect to router\n        try {\n            con = initApiConnection(username, password);\n            // log in to router\n            List<Map<String, String>> execute = con.execute(\"/ip/address/print\");\n            // execute a command\n            con.close();\n            // disconnect from router\n            return new ApiResult(execute);\n\n        } catch (MikrotikApiException e) {\n            log.info(\"登录RouterOS失败 = {}\", e.getMessage());\n            return new ApiResult(e.getMessage());\n        }\n    }\n\n    /*\n    /ip pool add name=pppoe_pool1 ranges=10.10.10.2-10.10.10.254\n    /ppp profile add name=pppoe_profile local-address=10.10.10.1 remote-address=pppoe_pool1\n    /interface pppoe-server server add authentication=pap service-name=PPPoE_Server interface=wan one-session-per-host=yes default-profile=pppoe_profile\n    Mikrotik API 调用和直接winbox的不同，需要添加/ 转义\n       */\n    @Override\n    public ApiResult createPPPOEServer(String ipPoolRange) {\n        ApiConnection con = null;\n        // connect to router\n        try {\n            con = initApiConnection(\"admin\", \"\");\n            // log in to router\n            con.execute(\"/ip/pool/print\");\n            con.execute(\"/ip/pool/add name=pool1 ranges=10.10.10.2-10.10.20.1\");\n            con.execute(\"/ppp/profile/add name=pppoe_10M remote-address=pool1\");\n            con.execute(\"/ppp/secret/add name=0327 password=0327Test service=pppoe profile=pppoe_10M\");\n            con.execute(\"/interface/pppoe-server/server/add authentication=pap service-name=PPPoE_Server interface=ether1 one-session-per-host=yes default-profile=pppoe_10M\");\n            con.execute(\"/interface/pppoe-server/server/enable numbers=0\");\n            //开始执行抓包pppoe-session file-limit=10KiB  控制文件大小 内存好像没起作用\n            String command4capFileName = \"/tool/sniffer/set file-name=%s.cap filter-mac-protocol=pppoe file-limit=10KiB memory-limit=10KiB\";\n            con.execute(String.format(command4capFileName, DateUtil.today()));\n            log.info(\"开始执行抓包pppoe-session==={}\", String.format(command4capFileName, DateUtil.today()));\n            con.execute(\"/tool/sniffer/start mac-protocol=pppoe interface=ether1 direction=rx\");\n            List<Map<String, String>> resultMapList = con.execute(\"/file/print\");\n            for (Map<String, String> fileMap : resultMapList) {\n                if ((fileMap.get(\"type\").contains(\".cap\") || fileMap.get(\"type\").contains(\".pcap\"))&& Integer.parseInt(fileMap.get(\"size\"))>1000){\n                    //创建pppoe服务器抓包时候控制文件size 一般大于2000B 就无法执行file print detail，即不能在terminal上解析报文了\n                    con.execute(\"/tool/sniffer/stop\");\n                }\n            }\n            return new ApiResult(\"初始化pppoe服务器成功!\");\n        } catch (MikrotikApiException e) {\n            log.info(\"登录RouterOS失败 = {}\", e.getMessage());\n            return new ApiResult(e.getMessage());\n        }\n    }\n\n    private ApiConnection initApiConnection(String username, String password) throws MikrotikApiException {\n        ApiConnection con;\n        con = ApiConnection.connect(\"192.168.2.2\");\n        con.setTimeout(5000);\n        // set command timeout to 5 seconds\n        con.login(username, password);\n        return con;\n    }\n\n    /**\n     * 解析后的json中包含了\\u0000 空格\n     *  {\n     *         \"account\": \"test4pppoe\",\n     *         \"password\": \"123456Test\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\"\n     *     }\n     * @return\n     */\n    @Override\n    public ApiResult getPcapFileDetail() {\n        ApiConnection con = null;\n        // connect to router\n        try {\n            con = initApiConnection(\"admin\", \"\");\n            // log in to router\n            List<Map<String, String>> resultMapList = con.execute(\"/file/print\");\n            resultMapList.stream().filter(s -> s.get(\"type\").contains(\".cap\") || s.get(\"type\").contains(\".pcap\")).forEach(s -> System.out.println(\"pcap报文的size=\"+s.get(\"size\")));\n            //获取每个cap数据包里面的content\n            List<String> contentList = resultMapList.stream().filter(s -> s.get(\"type\").contains(\".cap\") || s.get(\"type\").contains(\".pcap\")).map(s -> s.get(\"contents\")).collect(Collectors.toList());\n            //获取每个content里面的pppoe 账号密码\n            Set<String> pppoeAccountSet = contentList.stream().filter(content -> content.contains(\"user\")&& content.contains(\"authentication\")).map(content -> StrUtil.subBetween(content, \"user\", \"authentication\").trim()).collect(Collectors.toSet());\n            List<PppoeDetail> pppoeDetailList = Lists.newArrayListWithCapacity(pppoeAccountSet.size());\n            for (String pppoeAccount : pppoeAccountSet) {\n                List<String> passwordlist = contentList.stream().filter(content->content.contains(pppoeAccount)).map(content -> StrUtil.subBetween(content, pppoeAccount, \"\\u0000\").trim()).distinct().collect(Collectors.toList());\n                PppoeDetail pppoeDetail = new PppoeDetail();\n                pppoeDetail.setAccount(pppoeAccount);\n                if (!CollectionUtils.isEmpty(passwordlist)) {\n                    //直接截取字符串 去除了二进制流中的乱码 \\u0000空格 �LV\n                    pppoeDetail.setPassword(StrUtil.subPre(passwordlist.get(0),16));\n                }\n                pppoeDetailList.add(pppoeDetail);\n            }\n            // execute a command\n            con.close();\n            // disconnect from router\n            return new ApiResult(pppoeDetailList);\n        } catch (MikrotikApiException e) {\n            log.info(\"获取PPPOESession详情失败 = {}\", e.getMessage());\n            return new ApiResult(e.getMessage());\n        }\n    }\n\n    @Override\n    public ApiResult downloadPPPOESession() {\n        //下载Packet Sniffer下载创建的pcap文件\n        //TODO\n        //1. 不能直接抓去pppoe-session的数据\n        //2. pppoe 服务器的ip 地址动态传入\n        //3. 切换网络会出现winbox退出\n        //4. file print detail 不能查看2kb之外大文件，无法解析出contents内容\n        //5. 登录接口只调用一次，使用redis缓存账号密码\n        //6. 统一修改接口返回参数 T data\n        //7. 使用vim 或cat 来解析cap或pcap抓包文件\n        //ApiConnection con = null;\n        // connect to router\n        //C:\\WBYF_IDEA\n        try {\n           // con = initApiConnection(\"admin\", \"\");\n            // log in to router\n            //List<Map<String, String>> resultMapList = con.execute(\"/file/print\");\n            Sftp sftp= JschUtil.createSftp(\"192.168.2.2\", 22, \"admin\", \"\");\n            //进入远程目录\n            sftp.cd(\"/\");\n            log.info(\"获取sftp文件当前路径\",sftp.pwd());\n            log.info(\"显示当前目录下的文件\",sftp.ls(\"/\"));\n            List<String> fileList = sftp.ls(\"/\");\n            //下载远程文件\n            fileList.stream().filter(s -> s.contains(\".cap\") || s.contains(\".pcap\")).forEach(capFile -> sftp.get(capFile, \"C:\\\\WBYF_IDEA\\\\\"));\n            //上传本地文件\n            //sftp.put(\"e:/test.jpg\", \"/opt/upload\");\n            //sftp.get(\"0325.cap\", \"C:\\\\WBYF_IDEA\\\\\");\n            //关闭连接\n           // List<String> strings = FileUtil.readUtf8Lines(\"C:\\\\WBYF_IDEA\\\\0325.cap\");\n\n            sftp.close();\n            return new ApiResult(\"下载pcap数据文件成功\");\n        } catch (Exception e) {\n            log.info(\"下载pcap抓包文件失败 = {}\", e.getMessage());\n            return new ApiResult(e.getMessage());\n        }\n    }\n\n    @Override\n    public ApiResult parseLocalPcapFile() {\n        //String localPwd = System.getProperty(\"user.dir\");\n\n        String path =\"C:\\\\WBYF_IDEA\\\\JavaTutorials\\\\mongodb\\\\src\\\\main\\\\resources\\\\pcap\";\n        List<String> fileList = FileUtil.listFileNames(path);\n        List<String> parsedStringList = Lists.newArrayListWithCapacity(fileList.size());\n        for (String pcapFileName : fileList) {\n            if (pcapFileName.contains(\".cap\")||pcapFileName.contains(\".pcap\")) {\n                System.out.println(\"pcapFileName = \" + path+File.separator+pcapFileName);\n                String parsedString = FileUtil.readString(path+File.separator+pcapFileName, CharsetUtil.UTF_8);\n                parsedStringList.add(parsedString);\n            }\n        }\n\n        //System.out.println(\"path = \" + path);\n        //已经获取到解析好的pcap二进制流数据转String了，接下来分批去重提取账号密码\n        //1， winbox公用api端口会被挤下线\n        //2. mac地址修改成和服务器一样的\n        return  new ApiResult(parsedStringList);\n    }\n}\n```\n\n# 结论\n* 使用wireshark 打开抓到的cap 报文即可.\n  ![2019-05-02_153339_006.png](https://i.loli.net/2019/05/02/5ccaa3bdac0fa.png)\n\n# 参考\n* [抓包获取PPPOE账号密码](https://blog.ich8.com/post/3699)\n* [pppoe源码分析](https://blog.csdn.net/vivianliulu/article/details/77449780)\n* [mikrotik routeros 6.44.2 LEVEL 6 FOR VMWARE + CRACK](https://crackzsoft.com/mikrotik-routeros/)\n* [mikrotik demo](http://demo2.mt.lv/webfig/) MikroTik RouterOS online demo\n* [MikroTik手册](https://wiki.edcwifi.com/index.php?title=MikroTik%E6%89%8B%E5%86%8C)\n* [EDCwifi.com](https://download.edcwifi.com/index.php?title=MikroTik%E6%89%8B%E5%86%8C)\n* [pppoe自动到期通知](http://www.rosjb.com)\n* [routeros入门到精通v637e.pdf](https://gitee.com/jkwindy/pic4blog2/blob/master/RouterOS_RECOVER_PPPOE_PASSWORD/routeros%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9Av637e.pdf)\n* [Packet_Sniffer](https://wiki.mikrotik.com/wiki/Manual:Tools/Packet_Sniffer) \n* [PPPOE Protocal diagram](https://wiki.mikrotik.com/wiki/Manual:Interface/PPPoE)\n* [ros大玩家](https://space.bilibili.com/434853043spm_id_from=333.788.b_765f7570696e666f.2) 视频教程 `QQ：1247004718（微信同号）`\n* [RouterOS  edcwifi](https://www.edcwifi.com.cn/wiki/13.pdf)\n* [rfc2516.pdf](https://tools.ietf.org/pdf/rfc2516.pdf) `datatracker.ietf.org/doc/rfc2516`\n* [GideonLeGrange-mikrotik-java](https://github.com/GideonLeGrange/mikrotik-java)  Mikrotik Java API Client\n* [PPPoE服务器编写](https://stefenson.github.io/tags/PPPoE/)\n* [https://www.ros9.com/index.php]([http://www.roslm.com:82/index.php?dir=/002.%E8%B7%AF%E7%94%B1%E4%B8%93%E5%8C%BA](http://www.roslm.com:82/index.php?dir=/002.路由专区))\n* [HunterTik2.3.1.iso](https://docs.google.com/file/d/0ByWLVUEElhsmLXhBeEt3MHk1U2s/edit)\n* [X86 3865U安装ROS+LEDE双软路由(重要插件)](https://www.huakings.cn/post/216.html)\n* [mikrotik-routerosv7-first-look-vxlan](https://stubarea51.net/2020/02/15/mikrotik-routerosv7-first-look-vxlan/)\n* [Mikrotik jira docs](https://help.mikrotik.com/docs/display/ROS/RouterOS)\n* [MikroTik 5.25](https://mirrors.dtops.cc/iso/ros5.25_1G/)\n* [RouterOS wifi](https://www.edcwifi.com.cn/project/afc_api/Public/Uploads/2019-10-17/5da816a82f565.pdf)\n* [mikrotik archive](https://mikrotik.com/download/archive)\n* [RouterOS kernel 2.6.35-3.3.5](https://kkslinuxinfo.wordpress.com/category/mikrotik-routeros/)\n","tags":["life"]},{"title":"不登陆Oracle下载JDK","url":"/2017/11/21/Oracle-JDK-Download/","content":"\n## Oracle JDK Download No Need Login\n\n# 一. 背景\n\n* 目前下载Oracle JDK 都需要登陆才能下载，无意间发现在GitHub上有 \n* 国内镜像地址 [https://injdk.cn/](https://injdk.cn/)\n* 下载地址是 `https://github.com/frekele/oracle-java/releases`\n<!--more-->\n* ![Xnip2019-11-21_23-10-25.jpg](https://i.loli.net/2019/11/21/Qed3YCRy57qpKcM.jpg)\n<!--more-->\n\n# 二. 参考\n* [鹞之神乐](https://www.kagura.me/dev/20190424161314.html)\n* [Oracle-JDK下载](https://github.com/frekele/oracle-java/releases)\n* [https://mirrors.huaweicloud.com/java/jdk/8u172-b11/](https://mirrors.huaweicloud.com/java/jdk/8u172-b11/) 华为云镜像下载\n","tags":["jdk"]},{"title":"JVM学习笔记","url":"/2017/07/01/JVM-Optimized/","content":"# 内存分配\n堆内存有以下三个主要区域\n* 新生代\n    * Eden空间，新创建的实例都通过Eden空间进入运行时内存区域；\n    * Survivor 0空间，存活时间长的实例将会从Eden空间移动到 Survivor 0空间；\n    * Survivor 1空间，存活时间更长的实例将会从Survivor空间移动到 Survivor 1空间；\n\n<!-- more -->\n\n* 老年代\n    * 大对象直接进入老年代，比如特别长的字符串；\n    * 虚拟机给每个对象定义了一个对象年龄计数器，如果对象在Eden空间出生并经过第一次MinorGC仍然存活，并且能够被Survivor容纳的话，将被移动到Survivor 0空间，同时对象的年龄设为1。对象在Survivor中没熬过一次MinorGC，年龄就增加1，到达一定程度（默认15岁）就被晋升到老年代中。\n\n* 永久代\n    * 包含类、方法等细节元信息。\n\n\n![](https://github.com/codewindy/DesignPattern/blob/master/pic4hexo/4.jpg)\n![](https://github.com/codewindy/DesignPattern/blob/master/pic4hexo/31.jpg)\n![](https://github.com/codewindy/DesignPattern/blob/master/pic4hexo/47.jpg)\n\n\n* 对什么进行回收\n    * 枚举出所有的GC roots，从roots出发向下搜索，搜索走过的路称为引用链，在这些链上的对象在搜索的过程中会被打上标记，然后gc再做一次扫描，把没有被标记的对象全部清理掉,虚拟机为每个对象定义了一个年龄计数器，每次清理活下来的对象年龄往上递增，并移动到Survivor区域，当年龄达到15岁（默认的，可以修改）直接升到老年代。\n    * 那些可以做roots引用点的是：\n        * 栈中的引用对象\n        * 方法区中静态引用指向的对象\n        * 方法区中常量引用指向的对象\n\n* 何时回收\n    * Java GC主要针对Java堆区域进行垃圾回收，堆内存被分为新生代和老年代，其中新生代又分成Eden、Survivor0和Survivor1三块区域，新的对象都在Eden区创建出来。\n    * 新生代的垃圾回收叫做minor gc，当Eden区没有足够的空间分配给新对象的时候就触发minor gc，当老年代剩余空间不足以放置从新生代升过来的对象时触发full gc\n    * 新生代垃圾收集算法是复制算法\n    * 老年代的是标记-清除-压缩算法\n\n在新生代中，每次垃圾收集都发现有大批对象死去，只有少量存活，则使用复制算法，新生代内存被分为一个较大的Eden区和两个较小的Survivor区，每次只使用Eden区和一个Survivor区，当回收时将Eden区和Survivor还存活着的对象一次性的拷贝到另一个Survivor区上，最后清理掉Eden区和刚才使用过的Survivor区，Eden和Survivor的默认比例是8：1，可以使用-XX:SurvivorRatio来设置该比例。\n\n而老年代中对象存活率高，没有额外的空间对它进行分配担保，必须使用“标记-清理”或“标记-整理”算法。\n\n内存分配图\n\nJava VisualVM 监控\n\n\n# 垃圾回收算法\n* <font color='red'>标记-清除算法</font>\n   在程序运行期间，若可以使用的内存被耗尽，GC线程就会被触发并将程序暂停，随后扫描内存中所有的对象，将依旧存活的对象标记一遍，然后执行清除操作，清除没有被标记的对象，释放内存。（缺点：产生大量的内存碎片）\n* <font color='red'>复制算法</font>\n复制算法是为了解决标记-清除算法所产生的内存碎片。\n首先将内存大小相等的两部分，每次只使用其中的一部分，等这部分用完了，就把活着的对象移动到另一边，然后把剩下的部分全部清除掉。\n优点：避免产生内存碎片\n缺点：造成浪费。本来挺大一片地方，现在只能用一半，搞得挺不爽的\n* <font color='red'>标记-整理算法</font>\n算法不直接对可回收对象进行清理，而是让所有可用的对象都向一端移动。然后直接清理掉边界意外的内存。\n很显然，整理这一下需要时间，所以与标记清除算法相比，这一步花费了不少时间，但从长远来看，这一步还是很有必要的。\n该算法可谓“道德高尚，自己栽树，后人乘凉”\n* <font color='red'>分代收集</font>\n根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都有大批对象死去，只有少量存活，那就使用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。老年代中存活率高，使用标记清理或者标记整理算法来回收。\n\n# GC调优\n| 配置 | 描述 |\n| -- |\n| -Xms | 初始堆内存大小 |\n| -Xmx | 堆内存最大值（最大不要超过物理内存的80%） |\n| -Xnm | 新生代大小 |\n| -XX:permSize | 初始永久代大小 |\n| -XX:MaxPermSize | 永久代最大容量 |\n\n* 对新生代中的Eden区和survivor区以及老年代区域的大小进行调整。\n* 大对象直接进入老年代\n* 长期存活的对象直接进入老年代\n\n# 参考\n* [jvm Tuning pdf](http://ot2hu9qoc.bkt.clouddn.com/memorymanagement-whitepaper-150215.pdf)\n* [jvms8.pdf](http://ot2hu9qoc.bkt.clouddn.com/jvms8.pdf)\n* 深入理解jvm虚拟机\n* [Giraffe](https://yemengying.com/)\n* [五月的仓颉](https://www.cnblogs.com/xrq730/p/4989451.html)","tags":["jvm"]},{"title":"常见的数据结构和算法(上)","url":"/2017/05/25/DataStruture/","content":"<font style=\"color:black; background:yellow\">TreeMap 源码里面有红黑树,要学会自我总结和归纳知识,反思避免错误</font>\n<font style=\"color:black; background:yellow\">**[红黑树BST的实现](https://www.cs.usfca.edu/~galles/visualization/RedBlack.html)**</font>\n<font color=\"blue\">**[具体图形化帮助理解请参考,旧金山大学usfca的算法演示](https://www.cs.usfca.edu/~galles/visualization/flash.html)**</font>\n> 从简单的开始BubbleSort-->SelectSort-->BinarySort-->QuickSort-->DualPivotQuickSort\n> HashMap(自己实现一个简单的)-->TreeMap-->Red_Black_Tree\n\n一. 冒泡排序BubbleSort[2种方式实现]\n---\n\n\n<!--more-->\n\n\n```java\n/**\n * FJ day13 javaSE常见对象 数组冒泡排序\n *\n * @author yui\n *\n */\npackage com.codewindy.sorting;\npublic class Demo1_BubbleSort {\n     public static void main(String[] args) {\n          int[] arr = { 66, 11, 22, 33, 1, 55 };\n          bubbleSort(arr);\n          System.out.println(arr2String(arr));\n     }\n     /**\n      * 打印 到五角星 冒泡排序 返回值类型void 参数列表 int[] arr\n      * 1. void\n      * 2. int[] arr\n      *\n      */\n\n\n\n\n     public static void selectSort(int[] arr){//arr.length=6\n          for (int i = 0; i < arr.length-1; i++) {//-1 是应为6个数只需要比较5次\n\n              for (int j = 0; j < arr.length-1-i; j++) {//-1 防止索引越界 -i是为了提高效率\n\n                   if(arr[j]>arr[j+1]){\n                   /*   int temp=arr[i];\n                        arr[i]=arr[j];\n                        arr[j]=temp;*/\n                        Demo1_BubbleSort.swap(arr,j, j+1);\n                        // 调用静态的换位方法\n                   }\n              }\n          }\n     }\n     /*------------------------------上面的是第一种方式实现BubbleSort,下面的是第二种有图有真相-----------*/\n     public static void bubbleSort(int[] arr) {\n          // 定义参数\n          boolean swapped = true;\n          int j = 0;\n          int temp;\n          while (swapped) {\n              swapped = false;\n              j++;\n              for (int i = 0; i < arr.length - j; i++) {\n                   // 对i ,i+1 进行交换\n                   if (arr[i] > arr[i + 1]) {\n                        temp = arr[i];\n                        arr[i] = arr[i + 1];\n                        arr[i + 1] = temp;\n                        swapped = true; // { 66, 11, 22, 33, 1, 55 }进入这个方法 说明还能继续冒泡排序\n                   }\n              }\n          }\n     }\n     /**\n      * 打印数组 转化车位那个字符串的方法 1. 返回值的类型string 2. 参数列表 int[] arr\n      *\n      */\n     public static String arr2String(int[] arr) {\n          StringBuilder sb = new StringBuilder();\n          sb.append(\"[\");\n          for (int i = 0; i < arr.length; i++) {\n              if (i == arr.length - 1) {\n                   sb.append(arr[i]).append(\"]\");\n              } else {\n                   sb.append(arr[i]).append(\", \");\n              }\n          }\n          return sb.toString();\n     }\n\n     /**\n      * 交换数组的位置 1. 返回值类型void 2. 参数列表int[] arr,int i,int j\n      */\n     public static void swap(int[] arr, int i, int j) {\n          int temp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = temp; // 默认左边的> 右边的 冒泡排序向后面移动\n     }\n}\n\n```\n\n二. 选择排序的简单实现\n---\n\n  ```java\n\n\n  package com.codewindy.sorting;\n  public class Demo2_selectSort {\n       public static void main(String[] args){\n\n            int[] arr={66,55,44,33,22,11};\n            selectSort(arr);\n            String arr2String = Demo1_BubbleSort.arr2String(arr);\n            System.out.println(\"选择排序打印输出结果:\" +arr2String);\n       }\n\n       /**\n        * 选择排序\n        * 1. void\n        * 2. int[] arr\n        *\n        */\n       public static void selectSort(int[] arr){//arr.length=6\n            for (int i = 0; i < arr.length-1; i++) {\n\n                for (int j = i+1; j < arr.length; j++) {\n\n                     if(arr[i]>arr[j]){\n                     /*   int temp=arr[i];\n                          arr[i]=arr[j];\n                          arr[j]=temp;*/\n                          Demo1_BubbleSort.swap(arr, i, j);\n                          // 调用静态的换位方法\n                     }\n                }\n            }\n       }\n  }\n\n\n\n\n  ```\n\n三 .BinarySearch[Arrays参考源码]二分查找法\n---\n\n  ```java\n\n  package com.codewindy.sorting;\n  public class Demo3_BinarySearch {\n       public static void main(String[] args) {\n            int[] arr = { 11, 22, 33, 44, 55, 66, 77 };\n            // System.out.println(arr.length); //打印数组元素的个数 也是长度 角标 从0 开始\n            // System.out.println(arr[arr.length]); //数组角标越界异常\n            // System.out.println(binarySearch(arr, 22));\n            // System.out.println(binarySearch(arr, 66));\n            // System.out.println(binarySearch(arr, 888));\n            System.out.println(\"--------------通过jdk方式实现--------------------\");\n            System.out.println(binarySearch1(arr, 22));\n            System.out.println(binarySearch1(arr, 66));\n            System.out.println(binarySearch1(arr, 888));\n       }\n       /*------------第二种方式--------------------*/\n       public static int binarySearch1(int[] a, int key) {\n            return binarySearch0(a, 0, a.length, key);\n       }\n       private static int binarySearch0(int[] a, int fromIndex, int toIndex, int key) {\n            int low = fromIndex;\n            int high = toIndex - 1;\n            while (low <= high) {\n                int mid = (low + high) >>> 1;\n                int midVal = a[mid];\n                if (midVal < key)\n                     low = mid + 1;\n                else if (midVal > key)\n                     high = mid - 1;\n                else\n                     return mid; // key found\n            }\n            return -(low + 1); // key not found.\n       }\n       /**\n        * 二分查找法\n        *\n        * @param arr\n        *            数组,int key 形参\n        * @return 返回值是int -1 表示找不到\n        */\n       public static int binarySearch(int[] arr, int key) {\n            // 记录最小索引的值\n            int min = 0;\n            // 记录最大索引的值\n            int max = arr.length - 1;\n            // 求出中间的位置索引的值(min+max)/2\n            int mid = (max + min) >>> 1;\n            // 判断\n            while (arr[mid] != key) {\n                if (arr[mid] > key) {\n                     max = mid - 1;\n                } else if (key > arr[mid]) { // 如果要找的key >mid 中间值\n                     min = mid + 1; // 那么中间值\n                }\n                if (min > max) {\n                     return -1;\n                }\n                mid = (max + min) >>> 1; // 无论最大值 还是最小值改变中间值需要改变\n            }\n            return mid;\n       }\n  }\n\n  ```\n四 .快速排序是对冒泡排序的优化\n---\n\n  ```java\n  思想是: 先取数组的pivot left /right 然后进行刷选,数组中 <pivot 的值往左边丢, > pivot 的数组的值往右边丢,最终递归实现排序nlog2N 的时间复杂度和\n  二叉树的效率基本类似\n\n\n\n  package com.codewindy.sorting;\n  import java.util.Arrays;\n  public class Demo08_MyquickSort {\n       public static void main(String[] args) {\n            int[] arr={7,5,3,2,5,8,98,3};\n            quicksort(arr, 0, arr.length-1);\n            System.out.println(arr2String(arr));\n       }\n\n       /**\n        * 定义一个方法将 数组转化成字符串\n        * @param arr\n        * @return\n        */\n       public static String arr2String(int[] arr){\n            if(arr==null) return \"null\";\n            int iMax=arr.length-1;\n            if(iMax==-1) return \"[]\";\n\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"[\");\n            for (int i = 0; ; i++) {\n                sb.append(arr[i]);\n                if(i==iMax){\n                     return sb.append(\"]\").toString(); //在数组iMax 位置处时候返回\n                }\n                sb.append(\", \");\n            }\n       }\n       /**\n        * 将数组中的元素进行交换swap\n        * @param arr\n        * @param l\n        * @param r\n        */\n       public static void swap(int[] arr,int l, int r){\n            int temp=arr[l];\n            arr[l]=arr[r];\n            arr[r]=temp;\n\n       }\n\n\n       /**\n        * 快速排序 是 对BubbleSort 的一种算法优化,具体实现如下\n        * @param arr  要进行排序的数组\n        * @param left  数组的起始index 位置 一般0\n        * @param right 数组的iMax length 的值arr.lenth-1\n        */\n       public static void quicksort(int[] arr,int left,int right){\n\n            int l=left;\n            int r=right;\n\n            int pivot=arr[(l+r)>>1]; //找中间位置\n            while(l<r){\n                while(arr[l]<pivot) l++;\n                while(pivot<arr[r]) r--;\n\n                //出口 如果发生交叉越界就跳出,跳出while 循环\n                if(l>=r) break;\n\n                /*int temp=arr[l];\n                arr[l]=arr[r];\n                arr[r]=temp;*/\n                swap(arr, l, r);\n\n                /**\n                 * 这里写的看不懂了,应该是左边-->向右遍历到了pivot 临界值,就让r 继续向左移动\n                 */\n                if(arr[l]==pivot) --r;\n                if(arr[r]==pivot) ++l;\n            }\n            //当 左边和右边相等的时候,说明已经partition 分段的临界点,需要越界一位\n            if(l==r){\n                l++;\n                r--;\n\n            }\n            /**\n             * 但第一次partition 将数组分段结束后  对左右2边的数组进行递归处理\n             * 难点: 递归\n             * continue 和break 的区别\n             * return finally 的执行顺序?\n             */\n            if(left<r) quicksort(arr, left, r);\n            if(l<right) quicksort(arr,l,right);\n\n       }\n\n  }\n\n    /**\n     * 写一个固定容量同步容器，拥有put和get方法，以及getCount方法，\n     * 能够支持2个生产者线程以及10个消费者线程的阻塞调用\n     *\n     * 使用wait和notify/notifyAll来实现\n     *\n     * 使用Lock和Condition来实现\n     * 对比两种方式，Condition的方式可以更加精确的指定哪些线程被唤醒\n     *\n     * @author codewindy\n     */\n    package jp.codewindy.producer.consumer;\n\n    import java.util.LinkedList;\n    import java.util.concurrent.TimeUnit;\n    import java.util.concurrent.locks.Condition;\n    import java.util.concurrent.locks.Lock;\n    import java.util.concurrent.locks.ReentrantLock;\n\n    public class MyContainer<T> {\n        final private LinkedList<T> lists = new LinkedList<>();\n        final private int MAX = 10; //最多10个元素\n        private int count = 0;\n\n        private Lock lock = new ReentrantLock();\n        private Condition producer = lock.newCondition();\n        private Condition consumer = lock.newCondition();\n\n        public void put(T t) {\n            try {\n                lock.lock();\n                //想想为什么用while而不是用if？\n                while(lists.size() == MAX) {\n                    producer.await();\n                }\n\n                lists.add(t);\n                ++count;\n                //通知消费者线程进行消费\n                consumer.signalAll();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n        }\n\n        public T get() {\n            T t = null;\n            try {\n                lock.lock();\n                while(lists.size() == 0) {\n                    consumer.await();\n                }\n                t = lists.removeFirst();\n                count --;\n                //通知生产者进行生产\n                producer.signalAll();\n\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n            return t;\n        }\n\n        public static void main(String[] args) {\n            MyContainer<String> c = new MyContainer<>();\n            //启动消费者线程\n            for(int i=0; i<10; i++) {\n                new Thread(()->{\n                    for(int j=0; j<5; j++) System.out.println(c.get());\n                }, \"c\" + i).start();\n            }\n\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n            //启动生产者线程\n            for(int i=0; i<2; i++) {\n                new Thread(()->{\n                    for(int j=0; j<25; j++) c.put(Thread.currentThread().getName() + \" \" + j);\n                }, \"p\" + i).start();\n            }\n        }\n    }\n\n  ```","tags":["HashMap"]},{"title":"集合类的并发修改异常分析","url":"/2017/05/22/ConcurrentModificationException/","content":"===\n<font style=\"color:black; background:yellow\">List集合类中并发修改异常的处理</font>\n> 在oracle 起别名如果有数字/或者空格特殊字符必须加\"\"\n> 主要读源码 String/ArrayList.iterator()/TreeMap/HashMap\n> alt shift  h 生成equals 和hashcode 方法  想通过hashcode 找火车表的座位 ,然后如果hashcode 相同就有backet 桶结构再来比较equals如果相同就不存\n> 31 是一个质数 不大不小在int 里面 且 2 的5 次方 -1  \t 2<<4-1 100000-1  32  -->31\n\n* hashcode() 在hashSet添加元素的时候会自动调用如果相同就调用equals 在比较为了提高效率,属性相同的对象返回值必须相同,属性不同的返回值尽量不同\n* equals() 属性相同返回true 不存 属性不同返回false ,说明对象不同就存到一个bucket桶子里面 链表的方式存储\n\n<!--more-->\n* 书写顺序: select distinct..`*` from ..where[不能接聚合函数] ..group by ..having[聚合函数过滤条件] order by..limit[offset ,count/oracle里面没有]..desc\n\tsql语句的执行顺序: 嵌套子查询出来的 () 包起来 在重新起别名salavg,一张表自己内连接\n\n\tfrom emp where group by ..having ..select..rownum..order by..desc\n\tjoin on / is not null /group by 为毛线要在select 里面拼接条件\n\n\n**TODO_List**\n1. 重看HashMap 在jdk1.7和1.8 内部实现的区别\n2. for循环删除需要i-- 因为list.remove() 一个元素会使得list向上移动所以需要改成i--\n3. list.remove(i--),在list.iterator里面重写的方法实现了i-- ,你不-- 就会漏删除,所以可以直接用iterator.remove();不能用list.remove(\"bbb\")否则并发修改异常;\n4. foreach 里面用的就是iterator迭代器,所以不能list.remove(\"bbb\");\n```java\n\t* Exception in thread \"main\" java.util.ConcurrentModificationException\n\tat java.util.ArrayList$Itr.checkForComodification(Unknown Source)\n\tat java.util.ArrayList$Itr.next(Unknown Source)\n\tat com.itheima.treeset.TestDeleteofArrayList.main(TestDeleteofArrayList.java:34)\n\n\t  public void remove() {\n            if (lastRet < 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                AbstractList.this.remove(lastRet);\n                if (lastRet < cursor)\n                    cursor--;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException e) {\n                throw new ConcurrentModificationException();\n            }\n        }\n\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n    }\n```\n\n\n一 .并发修改异常的实例分析\n---\n1. FJ_day17_20总结讲解内容\n\n```java\n\n    package com.codewindy.treeset;\n\n    import java.util.ArrayList;\n    import java.util.Iterator;\n\n    public class TestDeleteofArrayList {\n    \tpublic static void main(String[] args) {\n    \t\tArrayList<String> list = new ArrayList<>();\n    \t\tlist.add(\"aaa\");\n    \t/*\tlist.add(\"bbb\");\n    \t\tlist.add(\"bbb\");*/\n\n    \t\tlist.add(\"bbb\");\n    \t\tlist.add(\"ccc\");\n    \t\tlist.add(\"bbb\");\n    \t\tlist.add(\"ddd\");\n    \t\tlist.add(\"eee\");\n    \t\t//普通for 循环可以删除 但是i 需要--,删除元素 后list 会向上移动\n    \t\t//所以漏掉了一个\n    \t/*\tfor(int i=0;i<list.size();i++){\n    \t\t\tif(list.get(i).equals(\"bbb\")){\n    \t\t\t\tlist.remove(i--);*/\n\n    //\t--------------上面普通for 下面方法2 Iterator实现删除----------------------------------------------\n    \t/*\t\t\tIterator<String> iterator = list.iterator();\n    \t\t\t\twhile(iterator.hasNext()){\n    \t\t\t\t\tString temp = iterator.next();\n    \t\t\t\t\tif(temp.equals(\"bbb\")){\n    \t\t\t\t\t\t//list.remove(\"bbb\");//不能用list自己的remove 方法并发修改异常\n    \t\t\t\t\t\titerator.remove();\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\t*/\n    \t\tfor (String str : list) {\n    \t\t\tif(str.equals(\"bbb\")){\n    \t\t\t\tlist.remove(str);\n    \t\t\t}\n    \t\t}\n\n    \t\tSystem.out.println(list);\n    }}\n\n```\n二. HashMap 在jdk1.7和1.8 内部实现的区别\n---\n\n\n三. count(1) 和count(*) 的区别\n---\n\n    ```sql\n\n    sql syntax\n\n    group by 一般和聚合函数一起使用才有意义,比如 count sum avg等,使用group by的两个要素:\n       (1) 出现在select后面的字段 要么是是聚合函数中的,要么就是group by 中的.\n       (2) 要筛选结果 可以先使用where 再用group by 或者先用group by 再用having\n    group by后面的字段必须与select后面的没有使用聚合函数的字段匹配\n    The GROUP BY syntax combines scalar column expressions and aggregate expressions. An asterisk (*) is allowed only in the COUNT(*) aggregate function.\n    The SQL GROUP BY syntax\n\n    The general syntax is:\n    SELECT column-names\n      FROM table-name\n     WHERE condition\n     GROUP BY column-names\n\n    The general syntax with ORDER BY is:\n    SELECT column-names\n      FROM table-name\n     WHERE condition\n     GROUP BY column-names\n     ORDER BY column-names\n\n\n    SELECT 姓名\n    FROM 学生表\n    WHERE NOT EXISTS\n    (\n        SELECT *\n        FROM 选课表\n        WHERE 学生表.学号 = 选课表.学号 AND 课程号 = 'C1'\n    );\n\n     所以count(1)和count(主键)这两个效率高。\n     不相关子查询：子查询的查询条件不依赖于父查询的称为不相关子查询。\n    相关子查询：子查询的查询条件依赖于外层父查询的某个属性值的称为相关子查询，带EXISTS 的子查询就是相关子查询\n    EXISTS表示存在量词：带有EXISTS的子查询不返回任何记录的数据，只返回逻辑值“True”或“False”\n\n    Having与Where的区别\n\n    where 子句的作用是在对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，where条件中不能包含聚组函数，使用where条件过滤出特定的行。\n    having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having 条件过滤出特定的组，也可以使用多个分组标准进行分组。\n\n    这就是需要注意的一点，在select指定的字段要么就要包含在Group By语句的后面，作为分组的依据；要么就要被包含在聚合函数中。\n\n    ```\n\n四 .下面这段话摘自Effective Java\n---\n\n    ```\n\n    在程序执行期间，只要equals方法的比较操作用到的信息没有被修改，那么对这同一个对象调用多次，hashCode方法必须始终如一地返回同一个整数。\n    如果两个对象根据equals方法比较是相等的，那么调用两个对象的hashCode方法必须返回相同的整数结果。\n    如果两个对象根据equals方法比较是不等的，则hashCode方法不一定得返回不同的整数。\n    　　对于第二条和第三条很好理解，但是第一条，很多时候就会忽略。在《Java编程思想》一书中的P495页也有同第一条类似的一段话：\n\n    　　“设计hashCode()时最重要的因素就是：无论何时，对同一个对象调用 hashCode()都应该产生同样的值。如果在讲一个对象用put()添加进HashMap时产生一个hashCdoe值，而用get()取出时却产生 了另一个hashCode值，那么就无法获取该对象了。所以如果你的hashCode方法依赖于对象中易变的数据，用户就要当心了，因为此数据发生变化 时，hashCode()方法就会生成一个不同的散列码”。\n\n    ```\n\n总结两种比较器Comparable和Comparator，后者相比前者有如下优点：\n---\n\n1.  如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法\n\n2.  实现Comparable接口的方式比实现Comparator接口的耦合性要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修改。从这个角度说，其实有些不太好，尤其在我们将实现类的.class文件打成一个.jar文件提供给开发者使用的时候。实际上实现Comparator接口的方式后面会写到就是一种典型的策略模式。\n","tags":["Exception"]},{"title":"Keep Reading","url":"/2017/05/20/Keep-Reading-bak/","content":"以下书籍pdf仅供自己翻阅复习\n---\n* **java编程**\n* [设计模式 design-pattern-java](http://ot2hu9qoc.bkt.clouddn.com/design-pattern-java.pdf)\n* [spring的经典之作 Spring in Action 4th Edition](http://ot2hu9qoc.bkt.clouddn.com/Craig%20Walls%20-%20Spring%20in%20Action%204th%20Edition%20-%202014.pdf)\n\n<!--more-->\n\n* [并发笔记 java-concurrency](http://ot2hu9qoc.bkt.clouddn.com/java-concurrency.pdf)\n* [Think in java 编程思想](http://ot2hu9qoc.bkt.clouddn.com/think-in-java.pdf)\n* [Tomcat官方pdf](http://ot2hu9qoc.bkt.clouddn.com/serverStartup.pdf)\n* [TomcatStartup Sequence](http://ot2hu9qoc.bkt.clouddn.com/serverStartup.txt)\n* **网络相关**\n* [鸟哥的linux私房菜](http://ot2hu9qoc.bkt.clouddn.com/niaoge_Linux_v2_0.pdf)\n* [nginx笔记优化](http://ot2hu9qoc.bkt.clouddn.com/nginx%E4%BC%98%E5%8C%96.pdf)\n* [计算机网络经典 TCP/IP volume I](http://ot2hu9qoc.bkt.clouddn.com/TCPIP%E8%AF%A6%E8%A7%A3%28%E5%8D%B71%E5%8D%8F%E8%AE%AE%29.pdf)\n* [Wireshark网络分析的艺术_林沛满](http://ot2hu9qoc.bkt.clouddn.com/Wireshark%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E7%9A%84%E8%89%BA%E6%9C%AF_%E6%9E%97%E6%B2%9B%E6%BB%A1%E8%91%97_%E5%8C%97%E4%BA%AC%EF%BC%9A%E4%BA%BA%E6%B0%91%E9%82%AE%E7%94%B5%E5%87%BA%E7%89%88%E7%A4%BE%20,2016.02_P198.pdf)\n* [图解性能优化](http://ot2hu9qoc.bkt.clouddn.com/%E5%9B%BE%E8%A7%A3%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.pdf)\n* [图解http](http://ot2hu9qoc.bkt.clouddn.com/%E5%9B%BE%E8%A7%A3HTTP+%E5%BD%A9%E8%89%B2%E7%89%88@www.java1234.com.pdf)\n* [merged.pdf](http://ot2hu9qoc.bkt.clouddn.com/merged.pdf)\n* [JAVA核心知识点整理.pdf](http://ot2hu9qoc.bkt.clouddn.com/merged.pdf)\n\n<hr>\n防止重复找软件浪费时间\n---\n\n* [百度IME](http://ot2hu9qoc.bkt.clouddn.com/BaiduType_Setup_Light.exe)\n* [cclear pro5.31](http://ot2hu9qoc.bkt.clouddn.com/CCleaner+Pro+v5.31+x86_x64+%E7%BB%BF%E8%89%B2%E7%89%88%5B%E5%A2%9E%E5%BC%BA%5D.7z)\n* [everything](http://ot2hu9qoc.bkt.clouddn.com/Everything-1.4.1.867b.x64-Setup.exe)\n* [jmeter从入门到精通.doc](http://ot2hu9qoc.bkt.clouddn.com/JMeter%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A.doc)\n* [java面试宝典2017](http://ot2hu9qoc.bkt.clouddn.com/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B82017.doc)\n* [SQLyog最新版本rsload.net](http://ot2hu9qoc.bkt.clouddn.com/SQLyog-12.4.1-0_51cto.exe)\n* [sublime Text3 S1.5.6](http://ot2hu9qoc.bkt.clouddn.com/Sublime+Text+3+%E4%B8%AD%E6%96%87%E4%BC%98%E5%8C%96%E7%89%88S1.5.6.exe)\n* [ultraISO](http://ot2hu9qoc.bkt.clouddn.com/UltraISO+v9.66.3300+%E7%89%B9%E5%88%AB%E7%89%88%E7%BB%BF%E8%89%B2%E7%89%88.7z)\n* [universal-USB-Installer ](http://ot2hu9qoc.bkt.clouddn.com/Universal-USB-Installer-1.9.7.8.exe)\n* [VMwareNetworkConfig.docx](http://ot2hu9qoc.bkt.clouddn.com/VMware%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE.docx)\n* [fastdfs 安装手册](http://ot2hu9qoc.bkt.clouddn.com/FastDFS_tut.docx)\n* [FSCapture8.7](http://ot2hu9qoc.bkt.clouddn.com/FSCapture8.7.exe)\n* [FSViewer64.zip](http://ot2hu9qoc.bkt.clouddn.com/FSViewer64.zip)\n* [WinRAR5.5_KeyGen.rar](http://ot2hu9qoc.bkt.clouddn.com/WinRAR5.5_KeyGen.rar)\n* [fg764p](http://ot2hu9qoc.bkt.clouddn.com/fg764p.exe)\n* [idea和eclipse的配置文件备份](http://ot2hu9qoc.bkt.clouddn.com/idea_eclipsebak.zip)\n* [ss3.4.3]( http://ot2hu9qoc.bkt.clouddn.com/ss-3.4.3.zip)\n* [wireshark](http://ot2hu9qoc.bkt.clouddn.com/Wireshark-win64-2.4.2.exe)\n* [jdk1.7_80](http://ot2hu9qoc.bkt.clouddn.com/jdk-7u80-windows-x64.exe)\n* [Git2.15](http://ot2hu9qoc.bkt.clouddn.com/Git-2.15.0-64-bit.exe)\n* [Xmanager_rsload.Xme5.rar](http://ot2hu9qoc.bkt.clouddn.com/rsload.net.Xme5.rar)\n* [rsload.net.NavicatPremium.rar](http://ot2hu9qoc.bkt.clouddn.com/Navicat.rar)\n* [navicat 4 MySQL](http://ot2hu9qoc.bkt.clouddn.com/navicat11.1%E5%AE%8C%E7%BE%8E%E7%A0%B4%E8%A7%A3%E7%89%88%E5%86%85%E5%B8%A6%E6%B3%A8%E5%86%8C%E6%9C%BA.rar)\n* [Routeros6.39 vmware winbox](http://ot2hu9qoc.bkt.clouddn.com/RouterOS%206.39.2%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%93%E7%94%A8.rar)\n* [markdownPad](http://markdownpad.com/download/markdownpad2-setup.exe)  `http://ot2hu9qoc.bkt.clouddn.com/KG.exe`\n* [猎豹wifi](http://ot2hu9qoc.bkt.clouddn.com/LiebaoFreeWiFi5.1.exe)\n* [BeyondCompare4](http://ot2hu9qoc.bkt.clouddn.com/BCompare-zh-4.1.9.21719_2_bak.zip)\n* [Advanced-REST-client](http://ot2hu9qoc.bkt.clouddn.com/Advanced-REST-client_v3.1.9.zip)\n* [MyLANViewer](http://ot2hu9qoc.bkt.clouddn.com/MyLanViewer.7z)\n* [proxifier 正版](http://ot2hu9qoc.bkt.clouddn.com/ProxifierSetup.exe) `注册码 5EZ8G-C3WL5-B56YG-SCXM9-6QZAP`\n* [proxifier 汉化版](http://ot2hu9qoc.bkt.clouddn.com/HA-Proxifier331-LDR.7z)\n* [teamviewer ](http://ot2hu9qoc.bkt.clouddn.com/TeamViewer_Setup_2.exe) `https://dl.tvcdn.de/download/TeamViewer_Setup.exe`\n* [centos6.9 minimal](http://mirrors.neusoft.edu.cn/centos/6.9/isos/x86_64/CentOS-6.9-x86_64-minimal.iso)\n* [evernote](https://cdn1.evernote.com/win6/public/Evernote_6.7.5.5825.exe)\n* [护眼宝](http://static1.huyanbao.com/pc/huyanbao_last.exe)\n* [IDM](http://ot2hu9qoc.bkt.clouddn.com/IDM6.29.2.7z)\n* [potplayer](http://ot2hu9qoc.bkt.clouddn.com/PotPlayer.zip)\n* [SumatraPDF](https://www.sumatrapdfreader.org/dl/SumatraPDF-3.1.2-64.zip)\n* [secureCRT ](http://ot2hu9qoc.bkt.clouddn.com/VanDyke.rar)\n* [VisualSVN](https://www.visualsvn.com/files/VisualSVN-Server-3.6.4-x64.msi)\n* [TortoiseGIT](https://download.tortoisegit.org/tgit/2.5.0.0/TortoiseGit-2.5.0.0-64bit.msi)\n* [eclipse_mars](http://mirrors.neusoft.edu.cn/eclipse/technology/epp/downloads/release/mars/2/eclipse-jee-mars-2-win32-x86_64.zip)\n* [dropins.7z](http://ot2hu9qoc.bkt.clouddn.com/dropins.7z)\n* [ssg idea 插件](http://ot2hu9qoc.bkt.clouddn.com/ssg.zip)\n* [editplus ](https://www.editplus.com/ftp/epp430_64bit.exe) `注册码a E8E8D-12490-A6CA2-01DF0-11D3B`\n* [notepad2-mod](https://github.com/XhmikosR/notepad2-mod/releases/download/4.2.25.998/Notepad2-mod.4.2.25.998.exe)\n* [lantern 4.1.2](https://github.com/getlantern/forum/issues/833)\n* [Source_Code_Read_Plan settings.bak](http://ot2hu9qoc.bkt.clouddn.com/Source_Code_Read_Plan.7z)\n* filezilla & winScp\n* vmware & xmind\n```\n—– BEGIN LICENSE\nTwitterInc\n200 User License\nEA7E-890007\n1D77F72E 390CDD93 4DCBA022 FAF60790\n61AA12C0 A37081C5 D0316412 4584D136\n94D7F7D4 95BC8C1C 527DA828 560BB037\nD1EDDD8C AE7B379F 50C9D69D B35179EF\n2FE898C4 8E4277A8 555CE714 E1FB0E43\nD5D52613 C3D12E98 BC49967F 7652EED2\n9D2D2E61 67610860 6D338B72 5CF95C69\nE36B85CC 84991F19 7575D828 470A92AB\n—— END LICENSE ——\nProxifier 注册码 序列号\n5EZ8G-C3WL5-B56YG-SCXM9-6QZAP（Standard Edition）\n```","tags":["books"]},{"title":"vim使用总结笔记","url":"/2017/05/13/Vim-Manual/","content":"<font style=\"color:black; background:yellow\">Toggle Vrapper,sublime Text,IdeaVim,Chrome具有vim插件</font>\n===\n\nchrome 的vimium 使用shift+? 进行提示  具体参考里面的快捷键\n---\n\n1.[vimium](https://github.com/582033/vim) 的基本入门使用 `* j [japan在 k Korea在下面] `\n\t* u pageUp  d pageDown\n\t* o 查找或者打开页面\n\t* x 退出  X还原\n\t* f 查询 --->很关键\n\t* 有个很重要的是f6在地址栏获取焦点,tab键可以取消默认的搜索焦点然后按f\n\t* shift +J 往左  K 往右\n\t* g0 第一个tab  t 开启一个新的tab页面\n\t* g$ 最后一个tab\n\t* H 返回history L 跳转当前\n\t* t 新开一个tab\n\t* T 查找开启的tab\n\t* 但如果完全失灵了 可以使用ctrl +W 实现关闭浏览器窗口/chrome\n\n\n\n<!--more-->\n\n\n\n[vim 初心者-Master的使用和dotfile](https://github.com/grigio/vim-sublime)\n---\n\n1. vim8.0在window可以通过git bash自带的练习\n\n\t* vim + selfNote.md 定位到bottom 底部\n\t* vim +12 第12 行打开   +/ettercap 不能有空格\n\t* **a** append 在光标后面插入\n\t* i 在光标前面插入insert  [A在行尾] [I 在首部][O 在行上方插入一行]\n\t* o 在光标所在行的下方 新建一行 转化为输入模式\n\t* 编辑模式转化成插入模式\n\t* 插入模式 转化成 编辑模式esc\n\t* 编辑转化末行模式 : 10,20d   !ls/etc\n\t* :wq ==:x 保存退出\n* 编辑模式下ZZ 保存退出\n1. 以逐一字符为单位移动 h 左  l 右\n\t* j [japan在K Korea在下面]\n\t* :help tutor 查看帮助文档\n2. 以单词为单位移动\n\t1. w 移至下一个档次的词首   3w\n\t2. e 跳至当前或者下一个单词的词尾\n\t3. b跳至当前或前一个单词的词首\n3. 行内跳转\n\t1. 0 绝对行首 开头\n\t2. $ 绝对行尾\n\t3. ^ 行首的第一个非空白字符\n4. 行间跳转\n5. `4G` 跳转到第4行\n\tG 最后一行\n\t末行模式直接输入: 50G向下跳转就可以了\n6. 翻屏\n\t1. ctrl f 向下翻屏\n\t2. ctrl b 向上翻屏\n\t3. ctrl d 向下翻半屏\n\t4. crtl u 向上翻半屏\n7. 删除单个字符\n\t* x 删除光标所在处的单个字符  3x 删除光标后面3个字符\n8. 删除命令d\n\td 命令跟跳转命令组合使用\n\t3dw de db\n\t2dd 删除当前光标所在2行\n9. 末行模式下删除,删除的可以撤销u,存在寄存器中,最后一次的d可以哟哦你过来粘贴\n\t. 表示当前行  1,+3d 表示向下共删除4行\n\t$ 最后一行\n\t: .,$-1 从光标行删除到末行\n\n10. 粘贴命令p\n\tp如果删除或复制的是整行,则粘贴在光标所在行的下方,如果复制或删除的是非整行,则粘贴在后面 P 相反\n11.  复制命令y\n\t用法同d 命令\n\t3yy  基本和d 相同\n12. 修改 先删除 内容,在进入insert 插入模式\n\tc 用法同d 命令  c$  删除到末尾并进入插入模式\n13. 替换使用r 6ra 替换单个字符\n\tR 进入替换模式,一直进入修改\n14. 撤销标记操作u\n\t1. u撤销前一次编辑操作 连续u 可撤销n<50次 默认情况下\n\t2.  3u 直接撤销最近3次的编辑操作\n\t3.  ctrl r 撤销最近一次的撤销操作\n15. 重复前一次编辑操作 [乐芙兰.] .\n16. 可视化模式\n\t1. v 按字符选取\n\t2. V 按矩形选取\n17. 查找替换末行模式使用\n\t/Pattern\n\t?pattern 模糊匹配\n\tn 向上  N 向下匹配\n18. 查找并替换s 命令 gi 全局忽略大小写\n\t起始地址,结束地址@pattern@string@gi\n\t: .,$-1s/id/ID/gi\n---\n\n\n\n        ```shell\n        1、vim 单文件中查找方法\n\n        正常模式下使用 / 或 ? 命令执行向后搜索或向前搜索\n\n        /love\t从光标位置向前搜索关键词 love\n        ?love\t从光标位置向后搜索关键词 love\n\n        正常模式下使用 n 或 N 命令执行 向前查找 或 向后查找 下一个关键词\n\n        :set ic\t\t忽略大小写命令，ic 为 ignore case 缩写\n        :set is\t\t边输入边显示匹配结果，is 是 incsearch 命令的缩写\n        :set hls\t高亮显示匹配结果，hls 为 highlight search 缩写\n\n        可将上述设置放入.vimrc 文件中，设为默认搜索设置\n\n        :set noic nois nohls\t将取消上述设置\n\n        :noh\t暂时取消高亮显示，不会影响下次高亮显示匹配结果\n\n\n        2、vim 多文件查找方法\n\n        正常模式下使用 :vim 或 :vimgrep 命令执行多文件搜索\n\n        搜索的时候涉及到选取文件问题，这里主要用到 * 作为通配符\n        ** 表示文件夹及子文件夹下的所有文件\n\n        搜索 love 关键词\n        :vim/love/*\t\t\t\t\t\t当前文件夹下的所有文件\n        :vim/love/**\t\t\t\t\t当前文件夹及子目录下的所有文件\n        :vim/love/**/*.php\t\t\t\t当前文件夹及子目录下的所有 php 文件\n        :vim/love/*.php aa/**/*.php\t\t当前文件夹下的 php 文件和 aa 目录及子目录下的 php 文件\n\n        使用 ** 和 * 可任意组合出想要搜索的文件\n\n        :cw\t\t\t查看搜索结果\n        :ccl\t\t关闭搜索结果\n        :cn\t\t\t查找下一个\n        :cp\t\t\t查找上一个\n\n\n        3、vim 单文件替换方法\n\n        单文件中使用 :s 命令进行替换操作\n\n        替换操作会涉及几个常用的标记\n        % 所有行  g 单行内所有匹配项  i 忽略大小写  c  确认是否替换\n\n        关键词 old 替换为 new\n        :s/old/new\t\t\t\t将光标所在行第一个 old 替换为 new\n        :s/old/new/g\t\t\t将光标所在行所有 old 替换为 new\n        :%s/old/new/gc\t\t\t全文执行替换,询问是否替换\n        :3,10s/old/new/gic\t\t将第3行到第10行内容替换，忽略大小写，且每个询问是否替换\n\n        g i c 可自由组合\n\n\n\n\n    \t4. vim 多文件操作\n    \t设置vim中默认使用选择缓冲区寄存器 “*：\n\n    \tset clipboard = unnamed\n    \t则可以直接通过y,p和系统选择缓冲区进行数据交换。\n\n    \tVimer们对高效的追求永无止境。还有其他更好地方法吗？\n\n    \t你可能想到了，vim寄存器。对，使用vim寄存器 “+p 粘贴即可。根本不用考虑是否自动缩进，是否paste模式，直接原文传递！:\n\n    \t\"+p\n    \t要说vim寄存器，就要从vim文件间的复制粘贴说起。\n\n    \tVim中，若要复制当前行，普通模式下按 yy 即可，在要粘贴的地方按 p 。这是vim将复制内容保存到了自己的寄存器中的缘故。如果在其他地方执行yy，新的内容将覆盖掉原寄存器中内容。如果想保存原寄存器中内容而同时增加新 的内容呢？这时就要在yy前增加标签了。标签以双引号开始，跟着的是标签名称，可以是数字0-9，也可以是26个字母，然后就是复制操作，这样就把复制内 容保存到该标签寄存器里。通过下面命令显示所有寄存器内容：:\n\n    \t:reg\n    \t其中注意两个特殊的寄存器：”* 和 “+。这两个寄存器是和系统相通的，前者关联系统选择缓冲区，后者关联系统剪切板。通过它们可以和其他程序进行数据交换。\n\n    \t备注：\n    \t若寄存器列表里无”* 或 “+ 寄存器，则可能是由于没有安装vim的图形界面所致。Debian/Ubuntu下可以通过安装vim-gnome解决。\n\n    \t$ sudo apt-get install vim-gnome\n    \t选择缓冲区和系统剪切板啥子区别？让我们继续研究。\n\n    \t选择缓冲区和剪切板\n    \t不同于Windows，Linux系统里存在两个剪切板：一个叫做选择缓冲区(X11 selection buffer)，另一个才是剪切板(clipboard)。\n\n    \t选择缓冲区是实时的，当使用鼠标或键盘选择内容时，内容已经存在于选择缓冲区了，这或许就是选择缓冲区的由来吧。\n\n    \t使用下面的命令查看选择缓冲区的内容：:\n\n    \t$ xclip -out\n    \t如果没有xclip命令，Debian/Ubuntu下可以通过如下命令安装：:\n\n    \t$ sudo apt-get install xclip\n    \t可以使用鼠标中键或键入Shift+Insert来粘贴选择缓冲区的内容。但对于有些GUI程序，比如gedit，只能通过鼠标中键调用选择缓冲区的内容，使用Shift+Insert的话，调用的是剪切板的内容。\n\n    \t剪切板和Windows的剪切板类似，在选择文字内容后，执行Ctrl + c或在菜单里选择‘复制’的话，这时内容才存放到剪切板里。\n\n    \t使用下面的命令查看剪切板的内容：:\n\n    \t$ xclip -out -sel clipboard\n    \t而使用剪切板的内容，则是Ctrl+v。 但在有些情况下，比如gnome-terminal，不能直接使用Ctrl+c，Ctrl+v，这时就要用Shift+Ctrl+c，Shift+Ctrl+v代替。\n\n    \t原格式粘贴\n    \t好了，了解了选择缓冲区和剪切板，下面就是实现保留格式粘贴的完美解决方案：\n\n        ```\n\n\n\nvim文件间复制粘贴的完美方案，文件传输的中转使用选择缓冲区。\n---\n\n\n\n\n1. **vim 编辑多个文件`:vsplit   :sp 水平分割 垂直切分窗口  Ctrl+6  两文件间的切换`**\n\t* 在终端里输入\n\tvim file1 file2 ... filen便可以打开所有想要打开的文件\n\t* vim已经启动\n\t输入 \t:` e  filelocation like  : e /etc/nginx.conf`\n\t可以再打开一个文件，并且此时vim里会显示出file文件的内容。\n\t* 同时显示多个文件：\n\t:sp         //水平切分窗口\n\t:vsplit     //垂直切分窗口\n\n\t* Ctrl+6  //两文件间的切换\n\t:bn      //下一个文件\n\t:bp      //上一个文件\n\t:ls       //列出打开的文件，带编号\n\t:b1~n  //切换至第n个文件\n\t对于用(v)split在多个窗格中打开的文件，这种方法只会在当前窗格中切换不同的文件。\n\t* 在窗格间切换的方法\n\tCtrl+w+方向键——切换到前／下／上／后一个窗格\n\tCtrl+w+h/j/k/l ——同上\n\tCtrl+ww——依次向后切换到下一个窗格中\n2. 多文件复制粘贴使用寄存器\n\t* +y3y 复制三行\n\t* +p  粘贴  gp最后一行\n3. who |wc -l  5人同时登陆在线  last\n   tail -f catalina.out 打印log\n\n    ```\n\n        方案一：\n        选择文本内容\n        vim普通模式下按 “*p 将选择缓冲区中内容粘贴进来\n        方案二：\n        复制文件内容\n        vim普通模式下按 “+ p 将剪切板内容粘贴进来\n\n    ```\n\n\n注意git配置windows& unix(macos) 之间差异\n---\n\n\n\n1.Git设置\n\ngit config --global core.autocrlf false\ngit config --global core.safecrlf true\n\n2.AutoCRLF提交时转换为LF，检出时转换为CRLF\ngit config --global core.autocrlf true\n\n","tags":["vim"]},{"title":"事务的隔离级别","url":"/2017/05/11/Transaction-Isolation-ACID/","content":"\n* ACID指数据库事务正确执行的四个基本要素分为原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。一个支持事务（Transaction）的数据库，必需要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性，交易过程极可能达不到交易方的要求\n* 数据库事务的隔离级别有4种，由低到高分别为Read uncommitted 、Read committed 、Repeatable read 、Serializable 。而且，在事务的并发操作中可能会出现脏读，不可重复读，幻读。下面通过事例一一阐述它们的概念与联系。\n\n<!--more-->\n\nRead uncommitted\n---\n\n读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。\n\n事例：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。\n\n分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。\n\n那怎么解决脏读呢？Read committed！读提交，能解决脏读问题。\n\nRead committed\n---\n\n读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。\n\n事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…\n\n分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。\n\n那怎么解决可能的不可重复读问题？Repeatable read ！\n\nRepeatable read\n---\n\n重复读，就是在开始读取数据（事务开启）时，不再允许修改操作\n\n事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。\n\n分析：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。\n\n什么时候会出现幻读？\n\n事例：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。\n\n那怎么解决幻读问题？Serializable！\n\nSerializable 序列化\n---\n\nSerializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。\n\n值得一提的是：大多数数据库默认的事务隔离级别是Read committed，比如Sql Server , Oracle。MySQL的默认隔离级别是Repeatable read。","tags":["mysql"]},{"title":"GIT Manual","url":"/2017/03/28/Git-Manual/","content":"\n\n* 常用 Git 命令清单。几个专用名词的译名如下。\n* Workspace：工作区\n* Index / Stage：暂存区\n* Repository：仓库区（或本地仓库）\n* Remote：远程仓库\n<!--more-->\n\n# 新建代码库\n```\n// 在当前目录新建一个Git代码库\n$ git init\n\n// 新建一个目录，将其初始化为Git代码库\n$ git init --bare [project-name]\n\n// 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-28/5617535.jpg)\n# 配置\nGit的设置文件为`.gitconfig`，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n```\n// 显示当前的Git配置\n$ git config --list\n\n// 编辑Git配置文件\n$ git config -e [--global]\n\n// 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n# 查看3种状态\n* 工作区：项目所在目录\n* 暂存态：add 到暂存区\n* 仓库：commit 到仓库\n\n\n```\n//objets\n[git@localhost .git]$ find /home/git/jd.git/.git/objects/ -type f\n/home/git/jd.git/.git/objects/ce/a2a9038c107da69ce2222aeb0b47f83df7c1a0\n/home/git/jd.git/.git/objects/bf/6399354dd8bd0538549b9dd254ffe48843c6bf\n/home/git/jd.git/.git/objects/7f/55fc6e3fcc69a0cc36a290b671a9a60ff1ee7b\n\n//HEAD\n[git@localhost .git]$ cat HEAD\nref: refs/heads/master\n\n//master\n[git@localhost .git]$ cat refs/heads/master\n7f55fc6e3fcc69a0cc36a290b671a9a60ff1ee7b\n\n//commit\n[git@localhost .git]$ git cat-file commit 7f55\ntree bf6399354dd8bd0538549b9dd254ffe48843c6bf\nauthor yangqinghua <yqh700@163.com> 1491724859 +0800\ncommitter yangqinghua <yqh700@163.com> 1491724859 +0800\n\nis first commit\n\n//tree\n[git@localhost .git]$ git ls-tree bf63\n100644 blob cea2a9038c107da69ce2222aeb0b47f83df7c1a0    main.java\n\n//blob\n[git@localhost .git]$ git show cea2\nthis is a java file\n\n//hash\n[git@localhost jd.git]$ git hash-object main.java\ncea2a9038c107da69ce2222aeb0b47f83df7c1a0\n```\n\n# 增加/删除文件\n```\n// 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n// 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n// 添加当前目录的所有文件到暂存区\n$ git add .\n\n// 添加每个变化前，都会要求确认\n// 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n// 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n// 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n// 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n# 代码提交\n```\n// 提交暂存区到仓库区\n$ git commit -m [message]\n\n// 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n// 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n// 提交时显示所有diff信息\n$ git commit -v\n\n// 使用一次新的commit，替代上一次提交\n// 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n// 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n# 分支\n```\n// 列出所有本地分支\n$ git branch\n\n// 列出所有远程分支\n$ git branch -r\n\n// 列出所有本地分支和远程分支\n$ git branch -a\n\n// 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n// 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n// 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n// 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n// 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n// 切换到上一个分支\n$ git checkout -\n\n// 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n// 合并指定分支到当前分支\n$ git merge [branch]\n\n// 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n// 删除分支\n$ git branch -d [branch-name]\n\n// 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n```\n\n# 标签\n```\n// 列出所有tag\n$ git tag\n\n// 新建一个tag在当前commit\n$ git tag [tag]\n\n// 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n// 删除本地tag\n$ git tag -d [tag]\n\n// 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n// 查看tag信息\n$ git show [tag]\n\n// 提交指定tag\n$ git push [remote] [tag]\n\n// 提交所有tag\n$ git push [remote] --tags\n\n// 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n```\n\n# 查看信息\n```\n// 显示有变更的文件\n$ git status\n\n// 显示当前分支的版本历史\n$ git log\n\n// 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n// 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n// 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n// 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n// 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n// 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n// 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n// 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n// 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n// 显示暂存区和工作区的差异\n$ git diff\n\n// 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n// 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n// 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n// 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n// 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n// 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n// 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n// 显示当前分支的最近几次提交\n$ git reflog\n```\n\n# 远程同步\n```\n// 下载远程仓库的所有变动\n$ git fetch [remote]\n\n// 显示所有远程仓库\n$ git remote -v\n\n// 显示某个远程仓库的信息\n$ git remote show [remote]\n\n// 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n// 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n// 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n// 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n// 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n# 撤销\n```\n// 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n// 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n// 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n// 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n// 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n// 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n// 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n// 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n// 新建一个commit，用来撤销指定commit\n// 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n// 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n# 其他\n```\n// 生成一个可供发布的压缩包\n$ git archive\n```\n# Set up GitHub push with SSH keys\n```shell script\n\nCreate a repo. Make sure there is at least one file in it (even just the README) Generate ssh key:\n\nssh-keygen -t rsa -C \"your_email@example.com\"\nCopy the contents of the file ~/.ssh/id_rsa.pub to your SSH keys in your GitHub account settings. Test SSH key:\n\nssh -T git@github.com\nclone the repo:\ngit clone git://github.com/username/your-repository\nNow cd to your git clone folder and do:\n\ngit remote set-url origin git@github.com:username/your-repository.git\nNow try editing a file (try the README) and then do:\n\ngit add -A\ngit commit -am \"my update msg\"\ngit push\n```\n* [git rebase教程](https://blog.csdn.net/zeng6325998/article/details/109320301?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242)\n* [git rebase push commit](https://blog.csdn.net/u010176097/article/details/96875148)","tags":["git"]},{"title":"HashMap","url":"/2017/03/20/HashMapAndSSM/","content":"\nHashMap的JDK 源码注释\n---\n1. 基于Map接口实现、允许null键/值、非同步、不保证有序(比如插入的顺序)、也不保证序不随时间变化。\n2. Capacity就是bucket的大小，Load factor就是bucket填满程度的最大比例。如果对迭代性能要求很高的话不要把capacity设置过大，也不要把load factor设置过小。当bucket中的entries的数目大于capacity*load factor时就需要调整bucket的大小为当前的2倍。\n\n<!-- more -->\n3. put函数的实现\n\n\t\t对key的hashCode()做hash，然后再计算index;\n\t\t如果没碰撞直接放到bucket里；\n\t\t如果碰撞了，以链表的形式存在buckets后；\n\t\t如果碰撞导致链表过长(大于等于TREEIFY_THRESHOLD)，就把链表转换成红黑树；\n\t\t如果节点已经存在就替换old value(保证key的唯一性)\n\t\t如果bucket满了(超过load factor*current capacity)，就要resize。\n4. get函数的实现\n\n\t\tbucket里的第一个节点，直接命中；\n\t\t如果有冲突，则通过key.equals(k)去查找对应的entry\n\t\t若为树，则在树中通过key.equals(k)查找，O(logn)；\n\t\t若为链表，则在链表中通过key.equals(k)查找，O(n)。\n\n5. Hashmap的原理\n\n\t```\n\t\t通过hash的方法，通过put和get存储和获取对象。存储对象时，我们将K/V传给put方法时，它调用hashCode计算hash从而得到bucket位置，进一步存储，HashMap会根据当前bucket的占用情况自动调整容量(超过Load Facotr则resize为原来的2倍)。获取对象时，我们将K传给get，它调用hashCode计算hash从而得到bucket位置，并进一步调用equals()方法确定键值对。如果发生碰撞的时候，Hashmap通过链表将产生碰撞冲突的元素组织起来，在Java 8中，如果一个bucket中碰撞冲突的元素超过某个限制(默认是8)，则使用红黑树来替换链表，从而提高速度。\n    ```\n\n* 什么时候会使用HashMap？他有什么特点？\n* 你知道HashMap的工作原理吗？\n* 你知道get和put的原理吗？\n* equals()和hashCode()的都有什么作用？\n* 你知道hash的实现吗？为什么要这样实现？\n* 如果HashMap的大小超过了负载因子(load factor)定义的容量，怎么办？\n\n\nHashMap 的总结归纳\n---\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-11/46599362.jpg)\n\n集合框架schema\n---\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-20/23337435.jpg)\nSpringMVC的处理流程\n---\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-20/66747192.jpg)\n\nSpringMVC 的处理流程和ssm整合\n---\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-11/81747139.jpg)\nstruts2 的流程图\n---\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-20/29168157.jpg)","tags":["hashmap"]},{"title":"Nginx 反向代理和负载均衡","url":"/2016/08/16/Nginx01/","content":"[阿里tengine参考手册](http://tengine.taobao.org/book/)\n\n1. 实现源码安装nginx 并且伪装服务器信息\n2. 配置负载均衡和反向代理tomcat默认200并发,nginx 50K web服务器并发提高tomcat应用服务器的访问体验\n3. 实现lvs + keeplived 高可用心跳vrrp协议 (未实现)\n\n<!-- more -->\n添加centos 阿里云repo\n---\n- mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\n- `wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo`\n- yum clean all\n- yum makecache\n- 先安装nginx依赖库 `yum -y install pcre zlib gcc-c++ openssl`\n\n编译安装nginx\n---\n* [官网下载最新stable 稳定版本的nginx源码安装包](https://nginx.org/download/nginx-1.12.1.tar.gz)\n* 修改nginx 的版本和server_name 伪装防止网络攻击\n\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-16/13225024.jpg)\n\n*  具体操作步骤\n\t1. 先解压 tar xvf nginx-1.12.1.tar.gz\n\t2. 进入目录 cd nginx-1.12.1/src 修改三个源码文件 `nginx.h` ` ngx_http_header_filter_module.c ``ngx_http_special_response.c`\n\t3. find / name  `nginx.h` 找到后  直接编辑文件\n\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-16/83843159.jpg)\n\n\n*  然后编译安装前 先`yum install 依赖库gcc pcre zlib openssl` 服务器统一放到mkdir -p  /usr/local/server/这个目录下\n*  **`chown root. /usr/local/sbin/nginx`   `chmod u+s /usr/local/sbin/nginx`将文件赋予root权限才能开启1024以下端口**\n\n\n* 配置nginx.conf 在nginx/sbin/nginx -t 测试配置文件是否正确\n\t1. nginx -s reload 重新加载配置不重启\n\t2. nginx -s stop\n\n* 配置tomcat 服务器 修改端口号 域名  和配置文件对应 实现反向代理和负载均衡\n* 开放防火墙端口规则`vi /etc/sysconfig/iptables` 开放对应端口号\n\n* 然后修改本机hosts文件127.0.0.1 对应域名 最后访问www.goo.co.jp ,基本功能实现图\n\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-16/17224896.jpg)\n\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-16/17127966.jpg)\n\n\n\n* 配置文件如下\n\n```shell\n\t./configure \\\n\t--prefix=/usr/local/server/nginx \\\n\t--pid-path=/var/run/nginx/nginx.pid \\\n\t--lock-path=/var/lock/nginx.lock \\\n\t--error-log-path=/var/log/nginx/error.log \\\n\t--http-log-path=/var/log/nginx/access.log \\\n\t--with-http_gzip_static_module \\\n\t--http-client-body-temp-path=/var/temp/nginx/client \\\n\t--http-proxy-temp-path=/var/temp/nginx/proxy \\\n\t--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\\n\t--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\n\t--http-scgi-temp-path=/var/temp/nginx/scgi\n\t注意：启动nginx之前，上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录\n\t[root@localhost sbin]# mkdir /var/temp/nginx/client -p\n\n\n\t\t#user  nobody;\n\t\tworker_processes  1;\n\n\t\t#error_log  logs/error.log;\n\t\t#error_log  logs/error.log  notice;\n\t\t#error_log  logs/error.log  info;\n\n\t\t#pid        logs/nginx.pid;\n\n\n\t\tevents {\n\t\t    worker_connections  1024;\n\t\t}\n\n\n\t\thttp {\n\t\t    include       mime.types;\n\t\t    default_type  application/octet-stream;\n\n\t\t    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n\t\t    #                  '$status $body_bytes_sent \"$http_referer\" '\n\t\t    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n\t\t    #access_log  logs/access.log  main;\n\n\t\t    sendfile        on;\n\n\t\t    #tcp_nopush     on;\n\t\t    server_tokens  off;  # 隐藏版本号\n\n\t\t\t\tclient_max_body_size 100m;\n\t\t\t\t#注意存在文件上传的接口需要配置 `client_max_body_size 100m;` 默认是1m;\n\t\t    #keepalive_timeout  0;\n\t\t    keepalive_timeout  65;\n\n\t\t    #gzip  on;\n\n\n\t\t    server {\n\t\t        listen      80;\n\t\t        server_name     www.test1.com;\n\n\t\t        #charset koi8-r;\n\n\t\t        #access_log  logs/host.access.log  main;\n\n\t\t        location / {\n\t\t            root   html-test1;\n\t\t            index  index.html index.htm;\n\t\t        }\n\t\t}\n\n\t\t    server {\n\t\t        listen      80;\n\t\t        server_name  www.test.com;\n\n\t\t        #charset koi8-r;\n\n\t\t        #access_log  logs/host.access.log  main;\n\n\t\t        location / {\n\t\t            root   html-test;\n\t\t            index  index.html index.htm;\n\t\t        }\n\t\t}\n\t\t    server {\n\t\t        listen       81;\n\t\t        server_name  localhost;\n\n\t\t        #charset koi8-r;\n\n\t\t        #access_log  logs/host.access.log  main;\n\n\t\t        location / {\n\t\t            root   html81;\n\t\t            index  index.html index.htm;\n\t\t        }\n\t\t}\n\n\t\t    server {\n\t\t        listen       80;\n\t\t        server_name  localhost;\n\n\t\t        #charset koi8-r;\n\n\t\t        #access_log  logs/host.access.log  main;\n\n\t\t        location / {\n\t\t            root   html;\n\t\t            index  index.html index.htm;\n\t\t        }\n\n\n\n\t\t        location = /50x.html {\n\t\t            root   html;\n\t\t        }\n\n\n\t\t    }\n\n\t\t    upstream goo{\n\n\t\t        server 192.168.140.128:8011;\n\t\t        server 192.168.140.128:8012 weight=3;\n\t\t    }\n\n\t\t       server {\n\t\t        listen       80;\n\t\t        server_name  www.goo.co.jp;\n\n\t\t        #charset koi8-r;\n\n\t\t        #access_log  logs/host.access.log  main;\n\n\t\t        location / {\n\t\t            proxy_pass  http://goo;\n\t\t            index  index.html index.htm;\n\t\t        }\n\n\n\n\t\t        location = /50x.html {\n\t\t            root   html;\n\t\t        }\n\n\n\t\t    }\n\n\n\t\t    upstream yandex{\n\n\t\t        server 192.168.140.128:8080;\n\t\t    }\n\n\t\t       server {\n\t\t        listen       80;\n\t\t        server_name  www.yandex.com;\n\n\t\t        #charset koi8-r;\n\n\t\t        #access_log  logs/host.access.log  main;\n\n\t\t        location / {\n\t\t            proxy_pass  http://yandex;\n\t\t            index  index.html index.htm;\n\t\t        }\n\n\n\n\t\t        location = /50x.html {\n\t\t            root   html;\n\t\t        }\n\n\n\t\t    }\n\n\n\n\n\n\n\t\t}\n\n\t\t\n#!/bin/bash\n#\n# chkconfig: - 85 15\n# description: nginx is a World Wide Web server. It is used to serve\n# Source function library.\n. /etc/rc.d/init.d/functions\n\n# Source networking configuration.\n. /etc/sysconfig/network\n\n# Check that networking is up.\n[ \"$NETWORKING\" = \"no\" ] && exit 0\n\nnginx=\"/usr/local/nginx/tengine-2.2.3/sbin/nginx\"\nprog=$(basename $nginx)\n\nNGINX_CONF_FILE=\"/usr/local/nginx/tengine-2.2.3/conf/nginx.conf\"\n\n#[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx\n\nlockfile=/var/lock/subsys/nginx\n\n#make_dirs() {\n#   # make required directories\n#   user=`nginx -V 2>&1 | grep \"configure arguments:\" | sed 's/[^*]*--user=\\([^ ]*\\).*/\\1/g' -`\n#   options=`$nginx -V 2>&1 | grep 'configure arguments:'`\n#   for opt in $options; do\n#       if [ `echo $opt | grep '.*-temp-path'` ]; then\n#           value=`echo $opt | cut -d \"=\" -f 2`\n#           if [ ! -d \"$value\" ]; then\n#               # echo \"creating\" $value\n#               mkdir -p $value && chown -R $user $value\n#           fi\n#       fi\n#   done\n#}\n\nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n#    make_dirs\n    echo -n $\"Starting $prog: \"\n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo\n    [ $retval -eq 0 ] && touch $lockfile\n    return $retval\n}\n\nstop() {\n    echo -n $\"Stopping $prog: \"\n    killproc $prog -QUIT\n    retval=$?\n    echo\n    [ $retval -eq 0 ] && rm -f $lockfile\n    return $retval\n}\n\nrestart() {\n    configtest || return $?\n    stop\n    sleep 1\n    start\n}\n\nreload() {\n    configtest || return $?\n    echo -n $\"Reloading $prog: \"\n#  -HUP是nginx平滑重启参数\n    killproc $nginx -HUP\n    RETVAL=$?\n    echo\n}\n\nforce_reload() {\n    restart\n}\n\nconfigtest() {\n  $nginx -t -c $NGINX_CONF_FILE\n}\n\nrh_status() {\n    status $prog\n}\n\nrh_status_q() {\n    rh_status >/dev/null 2>&1\n}\n\ncase \"$1\" in\n    start)\n        rh_status_q && exit 0\n        $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n        ;;\n    condrestart|try-restart)\n        rh_status_q || exit 0\n            ;;\n    *)\n        echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"\n        exit 2\nesac\n\n```\n\n* 正向代理\n```shell\n  正向代理发生在 client 端，用户能感知到的，并且是用户主动发起的代理。\n\n比如：翻墙。\n我们不能访问外网，但是可以访问代理服务器，然后代理服务器帮我们从外网中获取数据。但是在使用之前，用户往往需要主动在client端配置代理。\n\n黑客为了隐藏身份，用的就是正向代理。\n\n|客户端+代理服务器|-->|目标服务器|\n```\n\n* 反向代理\n```shell\n反向代理发生在 server端，从用户角度看是不知道发生了代理的（这个只有服务器工程师才知道）。\n\n比如：\n用户访问 服务器A，服务器A就给用户返回了数据。\n但是服务器A上其实并没有数据，它是偷偷从服务器B上获取数据，然后再返回给用户的。\n这个过程是在 server 端发生的，用户并不知道（只有服务器运维人员才知道）。\n\n|客户端|-->|代理服务器+目标服务器|\n```\n\n* 负载均衡\n```shell \n负载均衡是反向代理的一种运用。\n客户端访问服务器，服务器会把请求分发给其它多个不同的服务器（即反向代理），从而减轻了单个服务器处理海量请求的压力，不会出现崩溃。\n\n做了反向代理才能实现负载均衡。负载均衡是做反向代理的目的之一。\n反向代理，是有把请求转发的能力，这个是基础\n负载均衡，是把请求转发到不同的服务器上，均衡各个服务器\n```\n\n参考\n---\n\n* [nginx 在线配置生成](https://www.digitalocean.com/community/tools/nginx)\n* [正向代理和反向代理](https://segmentfault.com/a/1190000012549192)\n\n","tags":["nginx"]},{"title":"MySQL-Master-Slave-Sync","url":"/2016/05/12/MySQL-Master-Slave-Sync/","content":"\n**TODO_LIST**\n1. springmvc 的servlet启动参数 关系\n2. 整理笔记上线到网上blog\n\n    ```\n        springmvc的servlet 开机启动配置\n        load-on-startup标记容器是否在启动的时候实例化并调用其init()方法的优先级。\n        它的值表示servlet应该被载入的顺序\n        当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；\n        如果值小于0或未指定时，则表示只有在第一次请求的容器才在该servlet调用初始化函数\n        正值越小，servlet的优先级越高，应用启动时就越先加载。\n        值相同时，容器就会自己选择顺序来加载。\n        SELECT NOW(); 选择现在的时间在redis 里面设置一个倒计时做秒单\n\n    ```\n3. mysql读写分离的背景介绍\n    ```\n        服务器压力大,需要读写分离,负载均衡\n        主服务器通过写入bin-log文件实现[通过授权在master 服务器创建帐号]传递给slave 服务器读取\n        从服务器读 bin-log 写\n         Relay_Master_Log_File: mysql-bin.000050\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n    ```\n\n一 .mysql 主从同步linux和window配置(前提概要实现主从同步,读写分离)\n---\n<!--  more  -->\n\n\n1. 配置mysql 允许远程访问\n    ```\n    先登录到mysql服务器 授予root 远程登录权限\n    grant all on *.* to 'root'@'%' identified by 'root' with grant option;\n    flush privileges;\n    ```\n2. 主从同步配置前提\n    1. 数据库版本要相同\n    2. 数据库要相同taotao.sql\n    3. 主从服务器id 要设置不同,可以跟ip 后缀相同好记忆\n\n\n    ```\n    vim /etc/my.cnf 配置文件\n\n    # Replication Master Server (default)\n    # binary logging is required for replication\n\n    log-bin=mysql3306master-bin  名字可以自定义\n    #log-bin=mysql-bin\n    # binary logging format - mixed recommended\n    配置需要同步的数据库名taotao,不配置默认同步所有\n    binlog-do-db=taotao\n\n\n    # required unique id between 1 and 2^32 - 1\n    # defaults to 1 if master-host is not set\n    # but will not function as a master if omitted\n    server-id   = 203  一定要配置和ip 地址可以一致\n\n    ```\n3. 重启mysql 服务  service mysql restart\n4. 登录到 mysql -uroot -proot    show master status 查看主mysql 服务的状态信息\n5. 在主mysql 创建从slave账户并授权slave\n\n    ```\n    show master status;\n    grant replication slave on *.* to 'slave01'@'%' identified by '123456'; flush privileges;\n    show master status;  显示master bin-log文件名和位置\n    ```\n\n5. 在从服务器中配置my.cnf 中配置server-id = 206  配置从服务器的ip相同\n6. 然后在slave 中执行\n        ```\n        CHANGE MASTER TO\n            master_host='192.168.25.203',\n            master_user='slave01',\n            master_password='123456',\n            master_port=3306,\n            master_log_file='mysql-bin.000002',//从主配置中查询出来的会变的\n            master_log_pos=420; //每次都会改变的\n\n        start slave; //启动从库去请求主库\n        show slave status;  //查看 slave_IO Runing  NO 下面要改debug成  yes\n            //出现错误 查看log从服务器的mysql.err.log 错误日志的uuid 一定要不重复\n\n        查找到配置文件auto.cnf 中  server-uuid=uuid 改成不同的即可.\n        service mysql restart\n        stop slave;\n        start slave; 开启从服务器请求同步  reset slave; 重置\n        ```\n\n\n\n\n\n二 .mysql主从全部配置的流程\n---\n-  [前提: 注意主从之间的库名要一致,版本一致,server-id不同,见下图操作实例,和代码示例]\n\n\n-  ![mysql 架构原理实现图](http://ot2hu9qoc.bkt.clouddn.com/17-7-27/86344959.jpg)\n-  ![先配置主master服务器的my.cnf文件](http://ot2hu9qoc.bkt.clouddn.com/17-7-27/81757402.jpg)\n-  ![查看master服务器是否正常启动](http://ot2hu9qoc.bkt.clouddn.com/17-7-27/14730145.jpg)\n-  ![在naviacat中查看和处于安全考虑在master中添加slave01帐号和密码](http://ot2hu9qoc.bkt.clouddn.com/17-7-27/76878922.jpg)\n-  ![再次查看master服务器的状态](http://ot2hu9qoc.bkt.clouddn.com/17-7-27/64397842.jpg)\n-  ![从服务器slave的配置my.cnf中设置server-id需要和master的id不同](http://ot2hu9qoc.bkt.clouddn.com/17-7-27/85699377.jpg)\n-  ![在从服务器中执行以下语句](http://ot2hu9qoc.bkt.clouddn.com/17-7-27/73406735.jpg)\n-  ![查看是否实现主从同步的标志Yes](http://ot2hu9qoc.bkt.clouddn.com/17-7-27/81016323.jpg)\n-  ![MySQL图解WHERE](http://ot2hu9qoc.bkt.clouddn.com/%E7%8E%8B%E8%88%AA%E5%A8%81-MySQL-where%E6%9D%A1%E4%BB%B6%E5%89%96%E6%9E%90.jpg)\n\n        ```\n        -----------------1 前提配置----------------------------\n        两边的mysql 服务器能够ping 通 并且 service iptables stop 或者开放端口\n        setenforce 0\n        master 主表的 ip 192.168.25.203\n\n        slave  从表的ip  192.168.25.206\n\n        -----------2  master配置的流程-----------\n\n        vim /etc/my.cnf 配置文件\n\n            vim /etc/my.cnf 配置文件\n\n                    # Replication Master Server (default)\n                    # binary logging is required for replication\n\n                    log-bin=mysql3306master-bin  //名字可以自定义\n                    #log-bin=mysql-bin\n                    # binary logging format - mixed recommended 防止主键重复\n                    skip-name-resolve\n                    binlog-do-db=taotao //配置需要同步的数据库名taotao,多个数据库就复制一行添加,不配置默认同步所有\n\n\n                    # required unique id between 1 and 2^32 - 1\n                    # defaults to 1 if master-host is not set\n                    # but will not function as a master if omitted\n                    server-id   = 203 // 一定要配置和ip 地址可以一致\n\n\n        grant all on *.* to 'root'@'%' identified by 'root' with grant option;\n        flush privileges;    //一定可以让远程访问,即navicat访问\n\n\n\n        grant replication slave on *.* to 'slave01'@'%' identified by '123456'; flush privileges;\n        show master status;\n\n\n\n        show master status;\n\n\n\n        grant replication slave on *.* to 'slave01'@'%' identified by '123456'; flush privileges;\n        show master status;\n\n        show GRANTS for 'slave01'@'%';\n\n\n        -----------3  从表的配置--------------\n                vim /etc/my.cnf 配置文件\n\n\n                    # required unique id between 1 and 2^32 - 1\n                    # defaults to 1 if master-host is not set\n                    # but will not function as a master if omitted\n                    server-id   = 206 // 一定要配置和ip 地址可以一致\n                    skip-name-resolve #跳过dns检查\n\n        grant all on *.* to 'root'@'%' identified by 'root' with grant option;\n        flush privileges;    //一定可以让远程访问,即navicat访问\n\n\n\n        CHANGE MASTER TO\n                master_host='192.168.25.203',\n                master_user='slave01',\n                master_password='123456',\n                master_port=3306,\n                master_log_file='mysql-bin.000049',\n                master_log_pos=107;\n            stop slave ;\n            start slave;\n            show slave status;\n            start slave;  reset slave;\n\n            window下面查看是否是一致 runing 如果不是就是uuid 错误\n            server-id=` ip 地址后面 `千万不要相同\n            授权给从slave一定可以访问主master 的mysql 表,注意后面的%\n                grant replication slave on *.* to 'slave01'@'%' identified by '123456'; flush privileges;\n                show master status;\n\n            reset slave; 重置从服务器,配置到此结束,下面为具体解释\n\n\n\n\n\n\n\n                server-id=1        #数据库唯一ID，主从的标识号绝对不能重复。\n                log-bin=mysql-bin    #开启bin-log，并指定文件目录和文件名前缀\n                binlog-do-db=taotao  #需要同步的数据库。如果是多个同步库，就以此格式另写几行即可。如果不指明对某个具体库同步，就去掉此行，表示同步所有库（除了ignore忽略的库）。\n                binlog-ignore-db=mysql  #不同步mysql系统数据库。如果是多个不同步库，就以此格式另写几行；也可以在一行，中间逗号隔开。\n                sync_binlog = 1      ＃确保binlog日志写入后与硬盘同步\n                binlog_checksum = none  ＃跳过现有的采用checksum的事件，mysql5.6.5以后的版本中binlog_checksum=crc32,而低版本都是binlog_checksum=none\n                binlog_format = mixed   ＃bin-log日志文件格式，设置为MIXED可以防止主键重复。\n\n                skip-name-resolve   #不把IP地址解析为主机名; 与访问控制(mysql.user数据表)有关的检查全部通过IP地址行进。\n\n                mysql优化之--skip-name-resolve\n\n\n                同一IDC ,IDC内部有DNS服务器，对各服务器的IP做了反向解析，\n                但未对内网IP做反向解析，所以使用skip-name-resolve以后用内网地址向mysqlslap请求响应快了一半\n\n\n\n\n                涉及参数 --skip-name-resolve ,--skip-host-cache ,--skip-networking\n\n                当新的客户连接mysqld时，mysqld创建一个新的线程来处理请求。该线程先检查是否主机名在主机名缓存中。如果不在，线程试图解析主机名：\n\n                ·         如果操作系统支持线程安全gethostbyaddr_r ()和gethostbyname_r()调用，线程使用它们来执行主机名解析。\n\n                ·         如果操作系统不支持线程安全调用，线程锁定一个互斥体并调用gethostbyaddr()和gethostbyname()。在这种情况下，在第1个线程解锁互斥体前，没有其它线程可以解析不在主机名缓存中的主机名。\n\n                你可以用--skip-name-resolve选项启动mysqld来禁用DNS主机名查找。然而，在这种情况下，你只可以使用MySQL中的授权表中的IP号。\n\n                如果你有一个很慢的DNS和许多主机，你可以通过用--skip-name-resolve禁用DNS查找或增加HOST_CACHE_SIZE定义(默认值：128)并重新编译mysqld来提高性能。\n\n                你可以用--skip-host-cache选项启动服务器来禁用主机名缓存。要想清除主机名缓存，执行FLUSH HOSTS语句或执行mysqladmin flush-hosts命令。\n\n                如果你想要完全禁止TCP/IP连接，用--skip-networking选项启动mysqld。\n\n\n\n\n                连接mysql时，都会向DNS做反向地址查询\n                只有等超时失败后，mysql才会响应客户端\n                等待解析的mysql进程都是 login状态\n\n        ```\n\n三 . 通过spring 配置文件和具体代码实现\n---\n\n-  通过spring AOP 动态切换datasource数据源和slow_query_log 慢查询日志记录\n-  读[从slave服务器的配置],增删改[master服务器的配置]读写分离.\n1. 待续...中\n\n# 参考\n* [MySQL Manual reference](http://ot2hu9qoc.bkt.clouddn.com/refman-5.7-en.a4.pdf)","tags":["MySQL"]},{"title":"Redis-Basic","url":"/2016/03/01/Redis-Basic/","content":"\n Redis 的数据结构\n---\n\n* redis 是以 key-value 的存储系统，其中 value 支持五种数据类型。\n    * 字符串（String）\n    * 哈希（hash）\n    * 字符串列表（list）\n    * 字符串集合（set）\n    * 有序字符串集合（sorted set）\n\n* 定义key的注意事项\n    * key 最好不超过1024个字节，否则会降低查询效率同时消耗更多的内存。\n    * key 要做到见名知意，在项目中最好统一规范。\n    \n\n<!-- more -->\n\n---\n\n字符串（String）\n---\n\n* 字符串是 Redis 中最基础的数据类型，它在 Redis 中是二进制安全的，这意味着 String 类型存入和取出的数据相同。在 Redis 中字符串的 value 最多可以容纳的数据长度是512M。\n\n---\n### **存储 (set)**\n`set` `key` `value`\n\n* key 不存在则直接存储 。\n* key 存在则覆盖原值。\n* 该操作总是响应 “OK”。\n\n---\n### **读取 (get)**\n`get` `key`\n\n* 如果 key 存在则返回 key 映射的 value 。\n* key 映射的不是字符串类型则报错 。\n* key 不存在则返回 `nil` 。\n\n---\n### **删除 (del)**\n`del` `key`\n\n* key 存在则删除 key，并返回受影响的数量。\n* key 不存在则返回受影响的数量为 0 。\n\n---\n### **递增(incr) 递减(decr)**\n`incr` `key`\n`decr` `key`\n\n* 该操作将 key 的 value 递增或递减1。前提是 value 能转换成整型。\n* key 不存在则先存储 key 值为 0，再递增递减 。\n* value 是整型则正常递增递减 。\n* value 不是整型则报错。\n\n---\n### **指定增量（incrby）减量(decrby)**\n`incrby` `key` `increment`\n`decrby` `key` `decrement`\n\n* 所有场景和响应与 `incr` 、`decr` 命令一致。**需要指定增量**。\n\n\n---\n### **追加（append）**\n`append` `key` `value`\n\n* 该操作一律将值作为字符串在末尾追加 `value`。\n* key 存在，在末尾追加字符串。\n* key 不存在，直接存储 value。\n* 值是整数，将值作为字符串在末尾追加 `value`。\n\n哈希（hash）\n---\n\n* Redis 中的 Hash 类型可以看成是具有 String key 和 String value 的 map 容器。该类型非常适合存储对象信息。例如用户的 username password 等。每一个 Hash 可以存储 4294967295 个键值对\n### **存储（hset）**\n`hset` `key` `field` `value`\n\n* field 不存在，直接存储。\n* field 存在，执行覆盖操作。\n\n\n---\n### **存储多个键值对（hmset）**\n`hmset` `key` `field` `value` `field` `value` `...`\n\n* field 不存在，直接存储。\n* field 存在，执行覆盖操作。\n\n---\n### **读取（hget）**\n`hget` `key` `field`\n\n* field 不存在，正常读取 field 对应的值。\n* field 存在，返回 `nil`。\n\n---\n### **读取多个值（hmget）**\n`hmget` `key` `field` `field` `...`\n\n* field 不存在，正常读取 field 对应的值。\n* field 存在，返回 `nil` 。\n\n---\n### **读取全部（hgetall）**\n`hgetall` `key`\n\n\n---\n### **删除（hdel）**\n`hdel` `key` `field` `field` `...`\n\n* 该命令可以同时删除多个字段，返回值是被删除字段的数量。\n* field 存在，删除字段，返回被删除字段的数量。\n* field 不存在， 返回0。\n\n---\n### **增量（hincrby）**\n`hincrby` `key` `field` `numberValue`\n\n* 为整型值增加指定的增量，可以指定增量为负数实现减量\n\n\n---\n### **判断字段是否存在（hexists）**\n`hexists` `key` `field`\n\n* field 存在，返回 1。\n* field 不存在，返回 0。\n\n---\n### **获取指定 key 中字段个数（hlen）**\n`hlen` `key`\n\n---\n### **获取指定 key 所有的字段（hkeys）**\n`hkeys` `key`\n\n---\n### **获取指定 key 所有字段的值（hvals）**\n`hvals` `key`\n\n---\n\n\n**列表（list）**\n---\n\n* 在 Redis 中，List 类型是按照插入顺序排序的字符串链表。和数据结构中的普通链表一样，我们可以在其头部（left）和尾部（right）添加新的元素。在插入时，如果该键并不存在，Redis 将为该键创建一个新的链表。如果链表中的所有元素都被移除，那么该键也将会被从数据库中移除。List 中可以包含的最大元素数量是 4294967295。\n\n* 从元素插入和删除的效率角度来看，如果我们是在链表的两头插入或删除，这将是非常高效的操作，即使链表中已经存储了百万条记录，该操作也可以在常量时间内完成。如果插入或删除操作是作用于链表中间，那将会是非常低效的。\n\n---\n### **两端添加（lpush）（rpush）**\n* 在指定的 key 映射的 list 头部或尾部插入一个或多个 value 。如果 key 不存在，该命令在插入之前先创建一个空链表，之后再插入数据。插入成功，返回插入的数量。\n`lpush` `key` `value` `value` `...`\n`rpush` `key` `value` `value` `...`\n\n---\n### **读取列表（lrange）**\n`lrange` `key` `startIndex` `endIndex`\n\n* 从链表中读取从 startIndex（包含） 到 endIndex（包含） 的元素。索引从 0 开始，endIndex 可以为负数，-1 表示尾部的元素，-2 表示倒数第二个元素，以此类推。\n\n--- \n### **两端弹出（lpop）（rpop）**\n`lpop` `key`\n`rpop` `key`\n\n* 从链表的头部或尾部删除元素，如果 key 存在，则返回被删除的元素，如果 key 不存在，则返回 nil\n\n---\n### **获取列表中元素的个数（llen）**\n`llen` `key`\n\n---\n### **两端插入（仅当list存在）（lpushx）（rpushx）**\n`lpushx` `key` `value`\n`rpushx` `key` `value`\n\n* 仅当 List 存在时，向列表两端插入**一个**元素，如果 List 不存在则不插入。\n\n---\n### **删除（lrem）**\n`lrem` `key` `count` `value`\n\n* 从 key 中删除 count 个值为 value 的元素。如果 count 大于 0，从头部开始查找 count 个值为 value 的元素。如果 count 小于 0，则从尾部开始遍历。如果 count 等于 0，则删除所有值等于 value 的元素。\n\n---\n### **修改元素（lset）**\n`lset` `key` `index` `value`\n\n* 设置链表中索引为 index 的元素值。0 代表头部元素，-1 代表尾部元素，索引不存在则报错。\n\n---\n### **插入元素（linsert）**\n`linsert` `key` (`before` | `after`) `element` `value`\n\n* 在第一个 element 元素之前或者之后插入值为 velue 的元素。\n\n---\n### **弹出/添加**\n`rpoplpush` `resource` `destination`\n...\n\n* 从源链表的尾部弹出元素并添加到目标链表的头部，目标链表可以与源链表相同。\n\n---\n 集合（set）\n---\n * 在 Redis 中，我们可以将 Set 类型看作没有排序的字符集合，和 List 类型一样，我们也可以在该类型的数据值上执行添加、删除或判断某一元素是否存在等操作。这些操作的时间复杂度为 O(1)，即常量时间内完成。Set 可包含的最大元素数量是 4294967295。\n * 和List集合不同的是，<font style=\"color:black; background:yellow\">Set集合中不允许出现重复的元素</font>。相比 List 类型，Set 类型在功能上还存在着一些非常重要的特性，即在服务端完成多个 Set 之间的聚合计算操作，如 unions、intersections、defferences。由于这些操作均在服务端完成，因此效率极高，而且也节省了大量的网络 IO 开销。\n \n---\n### **存储（sadd）**\n`sadd` `key` `value` `value` `...`\n\n* 向 Set 中存储一个或多个值，如果要添加的值以及存在该 Set 中则不会重复添加。\n\n---\n### **删除（srem）**\n`srem` `key` `value` `value` `...`\n\n* 删除指定 key 中的一个或多个元素，如果值不存在不作任何操作。\n\n---\n### **读取（smembers）**\n`smembers` `key`\n\n* 获取该 key 中的所有元素。\n\n---\n### **判断元素是否存在（sismember）**\n`sismember` `key` `element`\n\n* 判断 element 是否存在于 key 中，存在返回 1，不存在返回 0，或者 key 不存在也返回 0。\n\n---\n### **差集运算（sdiff）**\n`sdiff` `key1` `key2` `key3` `...`\n\n* 返回 key1 与后面的 key 的差集成员。\n\n---\n### **交集运算（sinter）**\n`sinter` `key1` `key2` `key3` `...`\n\n* 返回所有 key 中的交集成员。\n\n---\n### **并集运算（sunion）**\n`kunion` `key1` `key2` `key3` `...`\n\n* 获得所有 key 中的并集成员。\n\n---\n### **获取元素数量（scard）**\n`scard` `key`\n\n\n---\n### **随机获得元素（srandmember）**\n`sranmember` `key`\n\n\n---\n### **存储差集（sdiffstore）、交集（sinterstore）和并集（sunionstore）**\n`sdiffstore` `destination` `key1` `key2` `...`\n`sinterstore` `destination` `key1` `key2` `...`\n`sunionstore` `destination` `key1` `key2` `...`\n\n* 将差集、交集和并集的运行结果存储到 destination 中。\n\n---\n\n 有序集合（sortedset）\n---\n* Sorted-Set 和 Set 类型极为相似，它们都是字符串的集合，都不允许重复的成员出现在一个 Set 中。它们之间的主要差别是 Sorted-Set 中的每一个成员都会有一个分数（score）与之关联，Redis 正是通过分数来为集合中的成员进行从小到达的排序。尽管 Sorted-Set 中的成员必须是唯一的，但是分数（score）却是可以重复的。\n\n### **存储（zadd）**\n`zadd` `key` `score1` `member1` `score2` `member2` `...`\n\n* 添加成员及成员分数到 key 中，如果该成员已经存在，则更新该成员的分数。\n\n---\n### **获取分数（zscore）**\n`zscore` `key` `member`\n\n* 获得 member 的分数。\n\n---\n### **获取集合数量（zcard）**\n`zcard` `key`\n\n\n---\n### **删除（zrem）**\n`zrem` `key` `member1` `member2` `...`\n\n* 删除一个或多个成员。\n\n---\n### **范围查询**\n`zrange` `key` `start` `end` `[withscores]`\n\n* 获取索引从 start（包含） 到 end（包含） 的成员，end 可以是负数，-1 表示最后一个，-2 表示倒数第二个，以此类推。\n* [widthscores]指示返回的成员具有分数。\n\n---\n### **降序查询（zrevrange）**\n`zrevrange` `key` `start` `end` `[withscore]`\n\n* 查询 start 到 end 的成员并反转，实现降序查询。\n\n---\n### **按照排名范围删除（zremrangebyrank）**\n`zremrangebyrank` `key` `start` `end`\n\n* 删除集合中索引从 start（包含） 到 end（包含） 的元素。\n\n---\n### **按照分数删除（zremrangebyscore）**\n`zremrangebyscore` `key` `minScore` `maxScore`\n\n* 删除集合中分数从 minScore（包含） 到 maxScore（包含） 的元素。\n\n---\n### **根据分数范围查询（zrangebyscore）**\n`zrangebyscore` `key` `minScore` `maxScore` `[withscore]` `[limit` `offset` `count]`\n\n* 根据指定的分数范围查找成员，可以用 limit 指定显示记录的条数。\n\n---\n### **为指定成员增加分数（zincrby）**\n`zincrby` `key` `increment` `member`\n\n* 为指定的成员增加指定的分数，返回值是更新后的分数。\n\n---\n### **获取指定分数区间的成员数量（zcount）**\n`zcount` `key` `minScore` `maxScore`\n\n* 获得分数在 minScire（包含） 到 maxScore（包含） 的成员数量。\n\n---\n### **获取成员排名（zrank）（zrevrange）**\n`zrank` `key` `member`\n`zrevrank` `key` `member`\n\n* 获取成员的升序或降序排名，排名从0开始计算。\n\n---\nKeys 的通用操作\n---\n### **查找 Key（keys）**\n`keys` `pattern`\n\n* 模糊查找 Key 。***** 表示任意一个或多个字符，**？**表示任意一个字符。\n\n---\n### **判断 Key 是否存在（exists）**\n`exists` `key`\n\n* 判断指定的 Key 是否存在，存在返回 1，不存在返回 0。\n\n---\n### **重命名 Key（rename）**\n`rename` `key` `newkey`\n\n\n---\n### **设置 Key 的有效时间（expire）**\n`expire` `key` `time`\n\n* 为 Key 设置有效时间，过期后将从内存中清除。time 的单位为：秒。\n\n---\n### **获取 Key 的有效时间（ttl）**\n`ttl` `key`\n\n* 获取 Key 的有效时间，如果没有设置则返回 -1，如果 key 不存在则返回 -2。\n\n---\n### **获取 Key 的类型（type）**\n`type` `key`\n\n* 获取 Key 的类型，如果 Key 不存在返回None。\n* [redis源码string分析](https://blog.csdn.net/qq_33996921/article/details/105226259)\n* [redis String源码分析 debug object key1](https://artisan.blog.csdn.net/article/details/105757490)","tags":["redis"]},{"title":"Debug-Eclipse","url":"/2015/08/05/Debug-Eclipse/","content":"\n##Debug 调试快捷键\n<font color=red>好记性不如烂笔头,debug不论在学习还是工作中都能很好的分析和解决问题</font>\n<!-- more -->\n\n* F5\n    `单步调试，遇到方法时跳入`\n* F6\n    `单步调试，遇到方法时跳过`\n* F7\n    `单步调试，遇到方法时跳出`\n* F8\n    `直接执行，遇到断点时暂停`\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-5/98352807.jpg)\n\n\n##视图\n* 变量视图\n    `监视/修改变量的值`\n ![](http://ot2hu9qoc.bkt.clouddn.com/17-8-5/20113069.jpg)\n\n\n\n* 断点视图\n    `断点列表`\n  ![](http://ot2hu9qoc.bkt.clouddn.com/17-8-5/28292010.jpg)\n\n* 表达式视图\n    `计算表达式的值`\n    `快捷键：Ctrl + Shift + I ，选中代码编辑区中的表达式按快捷键`\n\n  ![](http://ot2hu9qoc.bkt.clouddn.com/17-8-5/27737463.jpg)\n\n\n##条件断点\n\n断点满足条件时触发\n\n* 设置\n    `选中需要条件触发的断点 >> 右键 >> Breakpoint Properties 打开属性断点属性窗口`\n\n    `勾选 \"Hit count\"，输入循环次数`\n    `勾选 \"Conditional\"，输入条件表达式`\n\n  ![](http://ot2hu9qoc.bkt.clouddn.com/17-8-5/44775967.jpg)\n\n##springmvc的小误区\n\n* 请求参数的方法\n ![](http://ot2hu9qoc.bkt.clouddn.com/17-8-5/85811164.jpg)\n* 错误和正确的写法\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-5/49918100.jpg)\n\n* 根源是: eclipse的debug模式会自动给java类反射对象注入参数\n\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-5/34979265.jpg)\n\n##maven debug 源码关联添加\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-7/36374310.jpg)\n\n* Go to Help > Install New Software .. 安装插件\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-7/36051185.jpg)\n* http://ifedorenko.github.com/m2e-extras/\n* to search for the links. After installing this plugin I was finally able to debug the source code of dependencies.\n\n\n* 最后实现查看\n* springmvc的的DispatcherServlet 的doDispatcher方法执行\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-7/38348793.jpg)\n* 具体的业务逻辑代码 service 的执行\n\n![](http://ot2hu9qoc.bkt.clouddn.com/17-8-7/47074681.jpg)","tags":["debug"]},{"title":"Hello World","url":"/2015/07/01/Hello-World/","content":"---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n<!--more-->\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n* [nodejs版本太高导致deploy 为0 bytes](https://alanlee.fun/2021/02/28/hexo-empty-html/)\n* [node下载地址 hexo3.9 对应nodejs12](https://nodejs.org/dist/latest-v12.x/)","tags":["hexo"]},{"title":"旅の終り","url":"/2015/06/24/旅の終わり/","content":"旅の終り\n---\n```java\n涙なら、三水に「戻る」と書くのに\n僕の目から、心から、体から\n零れ落ちてゆくのは\nもう戻らないものばかり\nどうな悲しい結末の物語より\nいつまで立っても終われない物語のほうが悲しい\n宙ぶらりんになったエピソード\n回収しきれない伏線\n黙って伝ったままのは\n僕のフラグ\n出来損ないの声じゃなくて\nそれでもよかったな\nあなたの夜は終わった\nだから僕の夜も終わった\nあなたの白い指は\n夜気に暖かったなぁ\n触れた星と星の名前\nなんだったっげなぁ\n戻る場所がなくなった\n行ける場所ができた\n新しい夜が訪れる前に\n朝になる\n滲んだ涙の意味を探すより\n今は次のページを開こうと思う\n```\n<!--more-->\n![最后heima20170902220622.jpg](https://i.loli.net/2021/02/21/T1Wzj5NtHBZL4rV.jpg)\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=3&id=909585280&auto=1&height=66\"></iframe>","tags":["life"]}]